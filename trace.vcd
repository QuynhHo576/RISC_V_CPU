$version Generated by VerilatedVcd $end
$date Fri Apr 11 19:58:34 2025
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 "Q clk $end
  $var wire 64 "T entry [63:0] $end
  $var wire  1 "S hz32768timer $end
  $var wire 64 #% m_axi_acaddr [63:0] $end
  $var wire  1 #$ m_axi_acready $end
  $var wire  4 #' m_axi_acsnoop [3:0] $end
  $var wire  1 ## m_axi_acvalid $end
  $var wire 64 "p m_axi_araddr [63:0] $end
  $var wire  2 "t m_axi_arburst [1:0] $end
  $var wire  4 "v m_axi_arcache [3:0] $end
  $var wire 13 "o m_axi_arid [12:0] $end
  $var wire  8 "r m_axi_arlen [7:0] $end
  $var wire  1 "u m_axi_arlock $end
  $var wire  3 "w m_axi_arprot [2:0] $end
  $var wire  1 "y m_axi_arready $end
  $var wire  3 "s m_axi_arsize [2:0] $end
  $var wire  1 "x m_axi_arvalid $end
  $var wire 64 "[ m_axi_awaddr [63:0] $end
  $var wire  2 "_ m_axi_awburst [1:0] $end
  $var wire  4 "a m_axi_awcache [3:0] $end
  $var wire 13 "Z m_axi_awid [12:0] $end
  $var wire  8 "] m_axi_awlen [7:0] $end
  $var wire  1 "` m_axi_awlock $end
  $var wire  3 "b m_axi_awprot [2:0] $end
  $var wire  1 "d m_axi_awready $end
  $var wire  3 "^ m_axi_awsize [2:0] $end
  $var wire  1 "c m_axi_awvalid $end
  $var wire 13 "k m_axi_bid [12:0] $end
  $var wire  1 "n m_axi_bready $end
  $var wire  2 "l m_axi_bresp [1:0] $end
  $var wire  1 "m m_axi_bvalid $end
  $var wire 64 "{ m_axi_rdata [63:0] $end
  $var wire 13 "z m_axi_rid [12:0] $end
  $var wire  1 "~ m_axi_rlast $end
  $var wire  1 #" m_axi_rready $end
  $var wire  2 "} m_axi_rresp [1:0] $end
  $var wire  1 #! m_axi_rvalid $end
  $var wire 64 "e m_axi_wdata [63:0] $end
  $var wire  1 "h m_axi_wlast $end
  $var wire  1 "j m_axi_wready $end
  $var wire  8 "g m_axi_wstrb [7:0] $end
  $var wire  1 "i m_axi_wvalid $end
  $var wire  1 "R reset $end
  $var wire 64 "X satp [63:0] $end
  $var wire 64 "V stackptr [63:0] $end
  $scope module top $end
   $var wire 32 #) ADDR_WIDTH [31:0] $end
   $var wire 32 #) DATA_WIDTH [31:0] $end
   $var wire 32 #( ID_WIDTH [31:0] $end
   $var wire 32 #* STRB_WIDTH [31:0] $end
   $var wire  1 9 alu_operand1_control $end
   $var wire  1 : alu_operand2_control $end
   $var wire  1 "Q clk $end
   $var wire 64 "T entry [63:0] $end
   $var wire  1 G ex_alu_result_out $end
   $var wire 64 E ex_mem_read_data_out [63:0] $end
   $var wire 64 A ex_operand_1_in [63:0] $end
   $var wire 64 C ex_operand_2_in [63:0] $end
   $var wire  1 "S hz32768timer $end
   $var wire  4 5 id_alu_op_out [3:0] $end
   $var wire  1 @ id_branch_compare_result $end
   $var wire  3 4 id_reg_funct3_out [2:0] $end
   $var wire  7 3 id_reg_funct7_out [6:0] $end
   $var wire 64 , id_reg_imm_out [63:0] $end
   $var wire 64 . id_reg_imm_signed_out [63:0] $end
   $var wire 64 0 id_reg_imm_unsigned_out [63:0] $end
   $var wire  7 2 id_reg_opcode_out [6:0] $end
   $var wire  5 + id_reg_rd_out [4:0] $end
   $var wire  5 ) id_reg_rs1_out [4:0] $end
   $var wire  5 * id_reg_rs2_out [4:0] $end
   $var wire 64 ` if_address_out [63:0] $end
   $var wire 32 # if_instr [31:0] $end
   $var wire 64 #% m_axi_acaddr [63:0] $end
   $var wire  1 #$ m_axi_acready $end
   $var wire  4 #' m_axi_acsnoop [3:0] $end
   $var wire  1 ## m_axi_acvalid $end
   $var wire 64 "p m_axi_araddr [63:0] $end
   $var wire  2 "t m_axi_arburst [1:0] $end
   $var wire  4 "v m_axi_arcache [3:0] $end
   $var wire 13 "o m_axi_arid [12:0] $end
   $var wire  8 "r m_axi_arlen [7:0] $end
   $var wire  1 "u m_axi_arlock $end
   $var wire  3 "w m_axi_arprot [2:0] $end
   $var wire  1 "y m_axi_arready $end
   $var wire  3 "s m_axi_arsize [2:0] $end
   $var wire  1 "x m_axi_arvalid $end
   $var wire 64 "[ m_axi_awaddr [63:0] $end
   $var wire  2 "_ m_axi_awburst [1:0] $end
   $var wire  4 "a m_axi_awcache [3:0] $end
   $var wire 13 "Z m_axi_awid [12:0] $end
   $var wire  8 "] m_axi_awlen [7:0] $end
   $var wire  1 "` m_axi_awlock $end
   $var wire  3 "b m_axi_awprot [2:0] $end
   $var wire  1 "d m_axi_awready $end
   $var wire  3 "^ m_axi_awsize [2:0] $end
   $var wire  1 "c m_axi_awvalid $end
   $var wire 13 "k m_axi_bid [12:0] $end
   $var wire  1 "n m_axi_bready $end
   $var wire  2 "l m_axi_bresp [1:0] $end
   $var wire  1 "m m_axi_bvalid $end
   $var wire 64 "{ m_axi_rdata [63:0] $end
   $var wire 13 "z m_axi_rid [12:0] $end
   $var wire  1 "~ m_axi_rlast $end
   $var wire  1 #" m_axi_rready $end
   $var wire  2 "} m_axi_rresp [1:0] $end
   $var wire  1 #! m_axi_rvalid $end
   $var wire 64 "e m_axi_wdata [63:0] $end
   $var wire  1 "h m_axi_wlast $end
   $var wire  1 "j m_axi_wready $end
   $var wire  8 "g m_axi_wstrb [7:0] $end
   $var wire  1 "i m_axi_wvalid $end
   $var wire  1 7 mem_read_control $end
   $var wire  1 ; mem_to_reg_control $end
   $var wire  1 8 mem_write_control $end
   $var wire  1 #+ pc_sel_out $end
   $var wire 64 < regA_data_out [63:0] $end
   $var wire 64 > regB_data_out [63:0] $end
   $var wire  1 6 reg_write_control $end
   $var wire  1 "R reset $end
   $var wire 64 "X satp [63:0] $end
   $var wire 64 "V stackptr [63:0] $end
   $var wire 64 $ write_back_data [63:0] $end
   $scope module ALU $end
    $var wire  4 5 ex_alu_op_in [3:0] $end
    $var wire 64 Z ex_alu_result_out [63:0] $end
    $var wire 64 A ex_operand1_in [63:0] $end
    $var wire 64 C ex_operand2_in [63:0] $end
    $var wire 64 \ ex_operand_temp [63:0] $end
    $var wire 64 Z result [63:0] $end
    $var wire 64 ^ result_add_word [63:0] $end
   $upscope $end
   $scope module BranchCompare $end
    $var wire  3 4 branch_compare_funct3 [2:0] $end
    $var wire  7 2 branch_compare_opcode [6:0] $end
    $var wire 64 < branch_compare_regA_data [63:0] $end
    $var wire  1 Q branch_compare_regA_data_signed $end
    $var wire  1 S branch_compare_regA_data_unsigned $end
    $var wire 64 > branch_compare_regB_data [63:0] $end
    $var wire  1 R branch_compare_regB_data_signed $end
    $var wire  1 #- branch_compare_regB_data_unsigned $end
    $var wire  1 @ branch_compare_result $end
    $var wire  1 T equal_result $end
    $var wire  1 W greater_equal_result $end
    $var wire  1 Y greater_equal_result_unsigned $end
    $var wire  1 V less_than_result $end
    $var wire  1 X less_than_result_unsigned $end
    $var wire  1 U not_equal_result $end
   $upscope $end
   $scope module ControlUnit $end
    $var wire  1 9 alu_operand1_control $end
    $var wire  1 9 alu_operand1_control_out $end
    $var wire  1 : alu_operand2_control $end
    $var wire  1 : alu_operand2_control_out $end
    $var wire  1 @ branch_compare_result $end
    $var wire 32 M if_opcode [31:0] $end
    $var wire  1 7 mem_read $end
    $var wire  1 7 mem_read_control $end
    $var wire  2 O mem_to_reg [1:0] $end
    $var wire  1 ; mem_to_reg_control $end
    $var wire  1 8 mem_write $end
    $var wire  1 8 mem_write_control $end
    $var wire  2 N pcSel [1:0] $end
    $var wire  1 P pc_contrl_out $end
    $var wire  1 #+ pc_sel_out $end
    $var wire  1 6 reg_write $end
    $var wire  1 6 reg_write_control $end
   $upscope $end
   $scope module D_MEMORY $end
    $var wire  1 "Q clk $end
    $var wire 64 H ex_mem_address [63:0] $end
    $var wire  1 7 ex_mem_memory_read $end
    $var wire  1 8 ex_mem_memory_write $end
    $var wire 64 E ex_mem_read_data_out [63:0] $end
    $var wire 64 > ex_mem_write_data [63:0] $end
    $var wire  1 "R reset $end
   $upscope $end
   $scope module Decoder $end
    $var wire 32 b address [31:0] $end
    $var wire  4 5 alu_op [3:0] $end
    $var wire 64 K decoded_instruction [63:0] $end
    $var wire  3 4 funct3 [2:0] $end
    $var wire  7 3 funct7 [6:0] $end
    $var wire  4 5 id_alu_op_out [3:0] $end
    $var wire  3 4 id_reg_funct3_out [2:0] $end
    $var wire  7 3 id_reg_funct7_out [6:0] $end
    $var wire 32 J id_reg_imm_out [31:0] $end
    $var wire 64 . id_reg_imm_signed_out [63:0] $end
    $var wire 64 0 id_reg_imm_unsigned_out [63:0] $end
    $var wire  7 2 id_reg_opcode_out [6:0] $end
    $var wire  5 + id_reg_rd_out [4:0] $end
    $var wire  5 ) id_reg_rs1_out [4:0] $end
    $var wire  5 * id_reg_rs2_out [4:0] $end
    $var wire 32 J imm [31:0] $end
    $var wire 64 . imm_signed [63:0] $end
    $var wire 64 0 imm_unsigned [63:0] $end
    $var wire 32 # input_bin [31:0] $end
    $var wire  7 2 opcode [6:0] $end
    $var wire  5 + rd [4:0] $end
    $var wire  5 ) rs1 [4:0] $end
    $var wire  5 * rs2 [4:0] $end
   $upscope $end
   $scope module RegisterFile $end
    $var wire  1 "Q clk $end
    $var wire 32 "P i [31:0] $end
    $var wire  5 + rd_addr_in [4:0] $end
    $var wire  5 ) regA_addr_in [4:0] $end
    $var wire 64 < regA_data_out [63:0] $end
    $var wire  5 * regB_addr_in [4:0] $end
    $var wire 64 > regB_data_out [63:0] $end
    $var wire 64 $ reg_write_data_in [63:0] $end
    $var wire  1 6 reg_write_enable $end
    $var wire 64 n registers(0) [63:0] $end
    $var wire 64 p registers(1) [63:0] $end
    $var wire 64 "$ registers(10) [63:0] $end
    $var wire 64 "& registers(11) [63:0] $end
    $var wire 64 "( registers(12) [63:0] $end
    $var wire 64 "* registers(13) [63:0] $end
    $var wire 64 ", registers(14) [63:0] $end
    $var wire 64 ". registers(15) [63:0] $end
    $var wire 64 "0 registers(16) [63:0] $end
    $var wire 64 "2 registers(17) [63:0] $end
    $var wire 64 "4 registers(18) [63:0] $end
    $var wire 64 "6 registers(19) [63:0] $end
    $var wire 64 r registers(2) [63:0] $end
    $var wire 64 "8 registers(20) [63:0] $end
    $var wire 64 ": registers(21) [63:0] $end
    $var wire 64 "< registers(22) [63:0] $end
    $var wire 64 "> registers(23) [63:0] $end
    $var wire 64 "@ registers(24) [63:0] $end
    $var wire 64 "B registers(25) [63:0] $end
    $var wire 64 "D registers(26) [63:0] $end
    $var wire 64 "F registers(27) [63:0] $end
    $var wire 64 "H registers(28) [63:0] $end
    $var wire 64 "J registers(29) [63:0] $end
    $var wire 64 t registers(3) [63:0] $end
    $var wire 64 "L registers(30) [63:0] $end
    $var wire 64 "N registers(31) [63:0] $end
    $var wire 64 v registers(4) [63:0] $end
    $var wire 64 x registers(5) [63:0] $end
    $var wire 64 z registers(6) [63:0] $end
    $var wire 64 | registers(7) [63:0] $end
    $var wire 64 ~ registers(8) [63:0] $end
    $var wire 64 "" registers(9) [63:0] $end
    $var wire  1 "R reset $end
   $upscope $end
   $scope module fetch_inst $end
    $var wire  1 "Q clk $end
    $var wire 64 h display_addr [63:0] $end
    $var wire 64 "T entry [63:0] $end
    $var wire 64 f fetched_instr [63:0] $end
    $var wire 32 b if_address_out [31:0] $end
    $var wire 32 # if_instr [31:0] $end
    $var wire 10 l index [9:0] $end
    $var wire 64 "p m_axi_araddr [63:0] $end
    $var wire  2 "t m_axi_arburst [1:0] $end
    $var wire  8 "r m_axi_arlen [7:0] $end
    $var wire  1 "y m_axi_arready $end
    $var wire  3 "s m_axi_arsize [2:0] $end
    $var wire  1 "x m_axi_arvalid $end
    $var wire 64 "{ m_axi_rdata [63:0] $end
    $var wire  1 "~ m_axi_rlast $end
    $var wire  1 #" m_axi_rready $end
    $var wire  1 #! m_axi_rvalid $end
    $var wire 64 j next_display_addr [63:0] $end
    $var wire 64 ' next_pc [63:0] $end
    $var wire  3 & next_state [2:0] $end
    $var wire 64 d pc [63:0] $end
    $var wire  2 #, pcSel [1:0] $end
    $var wire 10 m pc_fetch [9:0] $end
    $var wire 64 H pc_from_alu_result [63:0] $end
    $var wire  1 #+ pcsel $end
    $var wire  1 "R reset $end
    $var wire  3 c state [2:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b0000000000000000000000000000000000000000000000000000000000000000 $
b000 &
b0000000000000000000000000000000000000000000000000000000000000000 '
b00000 )
b00000 *
b00000 +
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 .
b0000000000000000000000000000000000000000000000000000000000000000 0
b0000000 2
b0000000 3
b000 4
b0000 5
06
07
08
09
0:
0;
b0000000000000000000000000000000000000000000000000000000000000000 <
b0000000000000000000000000000000000000000000000000000000000000000 >
0@
b0000000000000000000000000000000000000000000000000000000000000000 A
b0000000000000000000000000000000000000000000000000000000000000000 C
b0000000000000000000000000000000000000000000000000000000000000000 E
0G
b0000000000000000000000000000000000000000000000000000000000000000 H
b00000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 K
b00000000000000000000000000000000 M
b00 N
b00 O
0P
0Q
0R
0S
1T
0U
0V
1W
0X
1Y
b0000000000000000000000000000000000000000000000000000000000000000 Z
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000000000000000000000000000000000000000000000000000000000000000 ^
b0000000000000000000000000000000011111111111111111111111111111100 `
b11111111111111111111111111111100 b
b000 c
b0000000000000000000000000000000000000000000000010000001101011000 d
b0000000000000000000000000000000000000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 h
b0000000000000000000000000000000000000000000000000000000000000000 j
b0000000000 l
b0000000000 m
b0000000000000000000000000000000000000000000000000000000000000000 n
b0000000000000000000000000000000000000000000000000000000000000000 p
b0000000000000000000000000000000000000000000000000000000000000000 r
b0000000000000000000000000000000000000000000000000000000000000000 t
b0000000000000000000000000000000000000000000000000000000000000000 v
b0000000000000000000000000000000000000000000000000000000000000000 x
b0000000000000000000000000000000000000000000000000000000000000000 z
b0000000000000000000000000000000000000000000000000000000000000000 |
b0000000000000000000000000000000000000000000000000000000000000000 ~
b0000000000000000000000000000000000000000000000000000000000000000 ""
b0000000000000000000000000000000000000000000000000000000000000000 "$
b0000000000000000000000000000000000000000000000000000000000000000 "&
b0000000000000000000000000000000000000000000000000000000000000000 "(
b0000000000000000000000000000000000000000000000000000000000000000 "*
b0000000000000000000000000000000000000000000000000000000000000000 ",
b0000000000000000000000000000000000000000000000000000000000000000 ".
b0000000000000000000000000000000000000000000000000000000000000000 "0
b0000000000000000000000000000000000000000000000000000000000000000 "2
b0000000000000000000000000000000000000000000000000000000000000000 "4
b0000000000000000000000000000000000000000000000000000000000000000 "6
b0000000000000000000000000000000000000000000000000000000000000000 "8
b0000000000000000000000000000000000000000000000000000000000000000 ":
b0000000000000000000000000000000000000000000000000000000000000000 "<
b0000000000000000000000000000000000000000000000000000000000000000 ">
b0000000000000000000000000000000000000000000000000000000000000000 "@
b0000000000000000000000000000000000000000000000000000000000000000 "B
b0000000000000000000000000000000000000000000000000000000000000000 "D
b0000000000000000000000000000000000000000000000000000000000000000 "F
b0000000000000000000000000000000000000000000000000000000000000000 "H
b0000000000000000000000000000000000000000000000000000000000000000 "J
b0000000000000000000000000000000000000000000000000000000000000000 "L
b0000000000000000000000000000000000000000000000000000000000000000 "N
b00000000000000000000000000100000 "P
1"Q
1"R
0"S
b0000000000000000000000000000000000000000000000010000001101011000 "T
b0000000000000000000000000000000000111111110000000000000000000000 "V
b0000000000000000000000000000000000110100010101100111000000000000 "X
b0000000000000 "Z
b0000000000000000000000000000000000000000000000000000000000000000 "[
b00000000 "]
b000 "^
b00 "_
0"`
b0000 "a
b000 "b
0"c
0"d
b0000000000000000000000000000000000000000000000000000000000000000 "e
b00000000 "g
0"h
0"i
0"j
b0000000000000 "k
b00 "l
0"m
0"n
b0000000000000 "o
b0000000000000000000000000000000000000000000000000000000000000000 "p
b00000111 "r
b000 "s
b10 "t
0"u
b0000 "v
b000 "w
0"x
0"y
b0000000000000 "z
b0000000000000000000000000000000000000000000000000000000000000000 "{
b00 "}
0"~
0#!
0#"
0##
0#$
b0000000000000000000000000000000000000000000000000000000000000000 #%
b0000 #'
b00000000000000000000000000001101 #(
b00000000000000000000000001000000 #)
b00000000000000000000000000001000 #*
0#+
b00 #,
0#-
#0
1"d
1"j
1"y
#250
0"Q
#250
#500
1"Q
b0000000000000000000000000000000000000000000000010000001101011000 "p
#500
#750
0"Q
#750
#1000
1"Q
#1000
#1250
0"Q
0"R
#1250
#1500
b001 &
b0000000000000000000000000000000000000000000000000000000000000000 d
1"Q
1"x
#1500
1"S
#1750
0"Q
#1750
#2000
b001 c
1"Q
b0000000000000000000000000000000000000000000000000000000000000000 "p
0"x
#2000
#2250
0"Q
#2250
#2500
1"Q
#2500
#2750
0"Q
#2750
#3000
1"Q
#3000
#3250
0"Q
#3250
#3500
1"Q
#3500
#3750
0"Q
#3750
#4000
1"Q
#4000
#4250
0"Q
#4250
#4500
1"Q
#4500
#4750
0"Q
#4750
#5000
1"Q
#5000
#5250
0"Q
#5250
#5500
1"Q
#5500
#5750
0"Q
#5750
#6000
1"Q
#6000
#6250
0"Q
#6250
#6500
1"Q
#6500
#6750
0"Q
#6750
#7000
1"Q
#7000
#7250
0"Q
#7250
#7500
1"Q
#7500
#7750
0"Q
#7750
#8000
1"Q
#8000
#8250
0"Q
#8250
#8500
1"Q
#8500
#8750
0"Q
#8750
#9000
1"Q
#9000
#9250
0"Q
#9250
#9500
1"Q
#9500
#9750
0"Q
#9750
#10000
1"Q
#10000
#10250
0"Q
#10250
#10500
1"Q
#10500
#10750
0"Q
#10750
#11000
1"Q
#11000
#11250
0"Q
#11250
#11500
1"Q
#11500
#11750
0"Q
#11750
#12000
1"Q
#12000
#12250
0"Q
#12250
#12500
1"Q
#12500
#12750
0"Q
#12750
#13000
1"Q
#13000
#13250
0"Q
#13250
#13500
1"Q
#13500
#13750
0"Q
#13750
#14000
1"Q
#14000
#14250
0"Q
#14250
#14500
1"Q
#14500
#14750
0"Q
#14750
#15000
1"Q
#15000
#15250
0"Q
#15250
#15500
1"Q
#15500
#15750
0"Q
#15750
#16000
1"Q
#16000
#16250
0"Q
#16250
#16500
1"Q
#16500
#16750
0"Q
#16750
#17000
1"Q
#17000
#17250
0"Q
#17250
#17500
1"Q
#17500
#17750
0"Q
#17750
#18000
1"Q
#18000
#18250
0"Q
#18250
#18500
1"Q
#18500
#18750
0"Q
#18750
#19000
1"Q
#19000
#19250
0"Q
#19250
#19500
1"Q
#19500
#19750
0"Q
#19750
#20000
1"Q
#20000
#20250
0"Q
#20250
#20500
1"Q
#20500
#20750
0"Q
#20750
#21000
1"Q
#21000
#21250
0"Q
#21250
#21500
1"Q
#21500
#21750
0"Q
#21750
#22000
1"Q
#22000
#22250
0"Q
#22250
#22500
1"Q
#22500
#22750
0"Q
#22750
#23000
1"Q
#23000
#23250
0"Q
#23250
#23500
1"Q
#23500
#23750
0"Q
#23750
#24000
1"Q
#24000
#24250
0"Q
#24250
#24500
1"Q
#24500
#24750
0"Q
#24750
#25000
1"Q
#25000
#25250
0"Q
#25250
#25500
1"Q
#25500
#25750
0"Q
#25750
#26000
1"Q
#26000
#26250
0"Q
#26250
#26500
1"Q
#26500
#26750
0"Q
#26750
#27000
1"Q
#27000
#27250
0"Q
#27250
#27500
1"Q
#27500
#27750
0"Q
#27750
#28000
1"Q
#28000
#28250
0"Q
#28250
#28500
1"Q
#28500
#28750
0"Q
#28750
#29000
1"Q
#29000
#29250
0"Q
#29250
#29500
1"Q
#29500
#29750
0"Q
#29750
#30000
1"Q
#30000
#30250
0"Q
#30250
#30500
1"Q
#30500
#30750
0"Q
#30750
#31000
1"Q
#31000
#31250
0"Q
#31250
#31500
1"Q
#31500
#31750
0"Q
#31750
#32000
1"Q
#32000
#32250
0"Q
#32250
#32500
1"Q
#32500
#32750
0"Q
#32750
#33000
1"Q
#33000
#33250
0"Q
#33250
#33500
1"Q
#33500
#33750
0"Q
#33750
#34000
1"Q
#34000
#34250
0"Q
#34250
#34500
1"Q
#34500
#34750
0"Q
#34750
#35000
1"Q
#35000
#35250
0"Q
#35250
#35500
1"Q
#35500
#35750
0"Q
#35750
#36000
1"Q
#36000
#36250
0"Q
#36250
#36500
1"Q
#36500
#36750
0"Q
#36750
#37000
1"Q
#37000
#37250
0"Q
#37250
#37500
1"Q
#37500
#37750
0"Q
#37750
#38000
1"Q
#38000
#38250
0"Q
#38250
#38500
1"Q
#38500
#38750
0"Q
#38750
#39000
1"Q
#39000
#39250
0"Q
#39250
#39500
1"Q
#39500
#39750
0"Q
#39750
#40000
1"Q
#40000
#40250
0"Q
#40250
#40500
1"Q
#40500
#40750
0"Q
#40750
#41000
1"Q
#41000
#41250
0"Q
#41250
#41500
1"Q
#41500
#41750
0"Q
#41750
#42000
1"Q
#42000
#42250
0"Q
#42250
#42500
1"Q
#42500
#42750
0"Q
#42750
#43000
1"Q
#43000
#43250
0"Q
#43250
#43500
1"Q
#43500
#43750
0"Q
#43750
#44000
1"Q
#44000
#44250
0"Q
#44250
#44500
1"Q
#44500
#44750
0"Q
#44750
#45000
1"Q
#45000
#45250
0"Q
#45250
#45500
1"Q
#45500
#45750
0"Q
#45750
#46000
1"Q
#46000
#46250
0"Q
#46250
#46500
1"Q
#46500
#46750
0"Q
#46750
#47000
1"Q
#47000
#47250
0"Q
#47250
#47500
1"Q
#47500
#47750
0"Q
#47750
#48000
1"Q
#48000
#48250
0"Q
#48250
#48500
1"Q
#48500
#48750
0"Q
#48750
#49000
1"Q
#49000
#49250
0"Q
#49250
#49500
1"Q
#49500
b0000000000000101000001111001001100000011010000000000000011101111 "{
1#!
#49750
0"Q
#49750
#50000
b100 &
1"Q
1#"
#50000
#50250
0"Q
#50250
#50500
b001 &
b100 c
b0000000000000101000001111001001100000011010000000000000011101111 f
b0000000000000000000000000000000000000000000000000000000000001000 j
b0000000010 l
1"Q
0#"
#50500
b1111100011000101000001010001001100000000000000000000010100010111 "{
#50750
0"Q
#50750
#51000
b001 c
b0000000000000000000000000000000000000000000000000000000000001000 h
1"Q
#51000
#51250
0"Q
#51250
#51500
b100 &
1"Q
1#"
#51500
#51750
0"Q
#51750
#52000
b001 &
b100 c
b1111100011000101000001010001001100000000000000000000010100010111 f
b0000000000000000000000000000000000000000000000000000000000010000 j
b0000000100 l
1"Q
0#"
#52000
b0000000010000001000001100001001100000000000000010011010110000011 "{
#52250
0"Q
#52250
#52500
b001 c
b0000000000000000000000000000000000000000000000000000000000010000 h
1"Q
#52500
#52750
0"Q
#52750
#53000
b100 &
1"Q
1#"
#53000
#53250
0"Q
#53250
#53500
b001 &
b100 c
b0000000010000001000001100001001100000000000000010011010110000011 f
b0000000000000000000000000000000000000000000000000000000000011000 j
b0000000110 l
1"Q
0#"
#53500
b0000000000000000000001101001011111111111000000010111000100010011 "{
#53750
0"Q
#53750
#54000
b001 c
b0000000000000000000000000000000000000000000000000000000000011000 h
1"Q
#54000
#54250
0"Q
#54250
#54500
b100 &
1"Q
1#"
#54500
#54750
0"Q
#54750
#55000
b001 &
b100 c
b0000000000000000000001101001011111111111000000010111000100010011 f
b0000000000000000000000000000000000000000000000000000000000100000 j
b0000001000 l
1"Q
0#"
#55000
b0000000000000000000101110001011101111000110001101000011010010011 "{
#55250
0"Q
#55250
#55500
b001 c
b0000000000000000000000000000000000000000000000000000000000100000 h
1"Q
#55500
#55750
0"Q
#55750
#56000
b100 &
1"Q
1#"
#56000
#56250
0"Q
#56250
#56500
b001 &
b100 c
b0000000000000000000101110001011101111000110001101000011010010011 f
b0000000000000000000000000000000000000000000000000000000000101000 j
b0000001010 l
1"Q
0#"
#56500
b0000001000000001000000010001001100000000100000010011010010000011 "{
#56750
0"Q
#56750
#57000
b001 c
b0000000000000000000000000000000000000000000000000000000000101000 h
1"Q
#57000
#57250
0"Q
#57250
#57500
b100 &
1"Q
1#"
#57500
#57750
0"Q
#57750
#58000
b001 &
b100 c
b0000001000000001000000010001001100000000100000010011010010000011 f
b0000000000000000000000000000000000000000000000000000000000110000 j
b0000001100 l
1"Q
0#"
#58000
b0000000000001000010001101011011100000000000000001000000001100111 "{
#58250
0"Q
#58250
#58500
b001 c
b0000000000000000000000000000000000000000000000000000000000110000 h
1"Q
#58500
#58750
0"Q
#58750
#59000
b100 &
1"Q
1#"
#59000
#59250
0"Q
#59250
#59500
b001 &
b100 c
b0000000000001000010001101011011100000000000000001000000001100111 f
b0000000000000000000000000000000000000000000000000000000000111000 j
b0000001110 l
1"Q
0#"
#59500
b1111110100011111111100000110111100011010000001101000011010010011 "{
1"~
#59750
0"Q
#59750
#60000
b001 c
b0000000000000000000000000000000000000000000000000000000000111000 h
1"Q
#60000
#60250
0"Q
#60250
#60500
b100 &
1"Q
1#"
#60500
#60750
0"Q
#60750
#61000
b100 c
b1111110100011111111100000110111100011010000001101000011010010011 f
b0000000000000000000000000000000000000000000000000000000001000000 j
b0000010000 l
1"Q
0#"
#61000
b000 &
b0000000000000000000000000000000000000000000000000000000001000000 '
0#!
#61250
0"Q
#61250
#61500
b000 c
b0000000000000000000000000000000000000000000000000000000001000000 d
b0000000000000000000000000000000000000000000000000000000001000000 h
1"Q
#61500
#61750
0"Q
#61750
#62000
b001 &
1"Q
b0000000000000000000000000000000000000000000000000000000001000000 "p
1"x
#62000
#62250
0"Q
#62250
#62500
b001 c
1"Q
0"x
#62500
#62750
0"Q
#62750
#63000
1"Q
#63000
#63250
0"Q
#63250
#63500
1"Q
#63500
#63750
0"Q
#63750
#64000
1"Q
#64000
#64250
0"Q
#64250
#64500
1"Q
#64500
#64750
0"Q
#64750
#65000
1"Q
#65000
#65250
0"Q
#65250
#65500
1"Q
#65500
#65750
0"Q
#65750
#66000
1"Q
#66000
#66250
0"Q
#66250
#66500
1"Q
#66500
#66750
0"Q
#66750
#67000
1"Q
#67000
#67250
0"Q
#67250
#67500
1"Q
#67500
#67750
0"Q
#67750
#68000
1"Q
#68000
#68250
0"Q
#68250
#68500
1"Q
#68500
#68750
0"Q
#68750
#69000
1"Q
#69000
#69250
0"Q
#69250
#69500
1"Q
#69500
#69750
0"Q
#69750
#70000
1"Q
#70000
#70250
0"Q
#70250
#70500
1"Q
#70500
#70750
0"Q
#70750
#71000
1"Q
#71000
#71250
0"Q
#71250
#71500
1"Q
#71500
#71750
0"Q
#71750
#72000
1"Q
#72000
#72250
0"Q
#72250
#72500
1"Q
#72500
#72750
0"Q
#72750
#73000
1"Q
#73000
#73250
0"Q
#73250
#73500
1"Q
#73500
#73750
0"Q
#73750
#74000
1"Q
#74000
#74250
0"Q
#74250
#74500
1"Q
#74500
#74750
0"Q
#74750
#75000
1"Q
#75000
#75250
0"Q
#75250
#75500
1"Q
#75500
#75750
0"Q
#75750
#76000
1"Q
#76000
#76250
0"Q
#76250
#76500
1"Q
#76500
#76750
0"Q
#76750
#77000
1"Q
#77000
#77250
0"Q
#77250
#77500
1"Q
#77500
#77750
0"Q
#77750
#78000
1"Q
#78000
#78250
0"Q
#78250
#78500
1"Q
#78500
#78750
0"Q
#78750
#79000
1"Q
#79000
#79250
0"Q
#79250
#79500
1"Q
#79500
#79750
0"Q
#79750
#80000
1"Q
#80000
#80250
0"Q
#80250
#80500
1"Q
#80500
#80750
0"Q
#80750
#81000
1"Q
#81000
#81250
0"Q
#81250
#81500
1"Q
#81500
#81750
0"Q
#81750
#82000
1"Q
#82000
#82250
0"Q
#82250
#82500
1"Q
#82500
#82750
0"Q
#82750
#83000
1"Q
#83000
#83250
0"Q
#83250
#83500
1"Q
#83500
#83750
0"Q
#83750
#84000
1"Q
#84000
#84250
0"Q
#84250
#84500
1"Q
#84500
#84750
0"Q
#84750
#85000
1"Q
#85000
#85250
0"Q
#85250
#85500
1"Q
#85500
#85750
0"Q
#85750
#86000
1"Q
#86000
#86250
0"Q
#86250
#86500
1"Q
#86500
#86750
0"Q
#86750
#87000
1"Q
#87000
#87250
0"Q
#87250
#87500
1"Q
#87500
#87750
0"Q
#87750
#88000
1"Q
#88000
#88250
0"Q
#88250
#88500
1"Q
#88500
#88750
0"Q
#88750
#89000
1"Q
#89000
#89250
0"Q
#89250
#89500
1"Q
#89500
#89750
0"Q
#89750
#90000
1"Q
#90000
#90250
0"Q
#90250
#90500
1"Q
#90500
#90750
0"Q
#90750
#91000
1"Q
#91000
#91250
0"Q
#91250
#91500
1"Q
#91500
#91750
0"Q
#91750
#92000
1"Q
#92000
#92250
0"Q
#92250
#92500
1"Q
#92500
#92750
0"Q
#92750
#93000
1"Q
#93000
#93250
0"Q
#93250
#93500
1"Q
#93500
#93750
0"Q
#93750
#94000
1"Q
#94000
#94250
0"Q
#94250
#94500
1"Q
#94500
#94750
0"Q
#94750
#95000
1"Q
#95000
#95250
0"Q
#95250
#95500
1"Q
#95500
#95750
0"Q
#95750
#96000
1"Q
#96000
#96250
0"Q
#96250
#96500
1"Q
#96500
#96750
0"Q
#96750
#97000
1"Q
#97000
#97250
0"Q
#97250
#97500
1"Q
#97500
#97750
0"Q
#97750
#98000
1"Q
#98000
#98250
0"Q
#98250
#98500
1"Q
#98500
#98750
0"Q
#98750
#99000
1"Q
#99000
#99250
0"Q
#99250
#99500
1"Q
#99500
#99750
0"Q
#99750
#100000
1"Q
#100000
#100250
0"Q
#100250
#100500
1"Q
#100500
#100750
0"Q
#100750
#101000
1"Q
#101000
#101250
0"Q
#101250
#101500
1"Q
#101500
#101750
0"Q
#101750
#102000
1"Q
#102000
#102250
0"Q
#102250
#102500
1"Q
#102500
#102750
0"Q
#102750
#103000
1"Q
#103000
#103250
0"Q
#103250
#103500
1"Q
#103500
b0000000000000000000000000000000000000000000000000000000000000000 "{
0"~
1#!
#103750
0"Q
#103750
#104000
b100 &
1"Q
1#"
