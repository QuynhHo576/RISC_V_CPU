$version Generated by VerilatedVcd $end
$date Wed Apr  9 21:31:38 2025
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 "; clk $end
  $var wire 64 "> entry [63:0] $end
  $var wire  1 "= hz32768timer $end
  $var wire 64 "m m_axi_acaddr [63:0] $end
  $var wire  1 "l m_axi_acready $end
  $var wire  4 "o m_axi_acsnoop [3:0] $end
  $var wire  1 "k m_axi_acvalid $end
  $var wire 64 "Z m_axi_araddr [63:0] $end
  $var wire  2 "^ m_axi_arburst [1:0] $end
  $var wire  4 "` m_axi_arcache [3:0] $end
  $var wire 13 "Y m_axi_arid [12:0] $end
  $var wire  8 "\ m_axi_arlen [7:0] $end
  $var wire  1 "_ m_axi_arlock $end
  $var wire  3 "a m_axi_arprot [2:0] $end
  $var wire  1 "c m_axi_arready $end
  $var wire  3 "] m_axi_arsize [2:0] $end
  $var wire  1 "b m_axi_arvalid $end
  $var wire 64 "E m_axi_awaddr [63:0] $end
  $var wire  2 "I m_axi_awburst [1:0] $end
  $var wire  4 "K m_axi_awcache [3:0] $end
  $var wire 13 "D m_axi_awid [12:0] $end
  $var wire  8 "G m_axi_awlen [7:0] $end
  $var wire  1 "J m_axi_awlock $end
  $var wire  3 "L m_axi_awprot [2:0] $end
  $var wire  1 "N m_axi_awready $end
  $var wire  3 "H m_axi_awsize [2:0] $end
  $var wire  1 "M m_axi_awvalid $end
  $var wire 13 "U m_axi_bid [12:0] $end
  $var wire  1 "X m_axi_bready $end
  $var wire  2 "V m_axi_bresp [1:0] $end
  $var wire  1 "W m_axi_bvalid $end
  $var wire 64 "e m_axi_rdata [63:0] $end
  $var wire 13 "d m_axi_rid [12:0] $end
  $var wire  1 "h m_axi_rlast $end
  $var wire  1 "j m_axi_rready $end
  $var wire  2 "g m_axi_rresp [1:0] $end
  $var wire  1 "i m_axi_rvalid $end
  $var wire 64 "O m_axi_wdata [63:0] $end
  $var wire  1 "R m_axi_wlast $end
  $var wire  1 "T m_axi_wready $end
  $var wire  8 "Q m_axi_wstrb [7:0] $end
  $var wire  1 "S m_axi_wvalid $end
  $var wire  1 "< reset $end
  $var wire 64 "B satp [63:0] $end
  $var wire 64 "@ stackptr [63:0] $end
  $scope module top $end
   $var wire 32 "q ADDR_WIDTH [31:0] $end
   $var wire 32 "q DATA_WIDTH [31:0] $end
   $var wire 32 "p ID_WIDTH [31:0] $end
   $var wire 32 "r STRB_WIDTH [31:0] $end
   $var wire  1 4 alu_src_control $end
   $var wire  1 "; clk $end
   $var wire 64 "> entry [63:0] $end
   $var wire 64 9 ex_alu_result_out [63:0] $end
   $var wire 64 ; ex_operand_2_in [63:0] $end
   $var wire  1 "= hz32768timer $end
   $var wire  4 2 id_alu_op_out [3:0] $end
   $var wire  3 "s id_reg_funct3_out [2:0] $end
   $var wire  7 1 id_reg_funct7_out [6:0] $end
   $var wire 64 * id_reg_imm_out [63:0] $end
   $var wire 64 , id_reg_imm_signed_out [63:0] $end
   $var wire 64 . id_reg_imm_unsigned_out [63:0] $end
   $var wire  7 0 id_reg_opcode_out [6:0] $end
   $var wire  5 ) id_reg_rd_out [4:0] $end
   $var wire  5 ' id_reg_rs1_out [4:0] $end
   $var wire  5 ( id_reg_rs2_out [4:0] $end
   $var wire 64 J if_address_out [63:0] $end
   $var wire 32 # if_instr [31:0] $end
   $var wire 64 "m m_axi_acaddr [63:0] $end
   $var wire  1 "l m_axi_acready $end
   $var wire  4 "o m_axi_acsnoop [3:0] $end
   $var wire  1 "k m_axi_acvalid $end
   $var wire 64 "Z m_axi_araddr [63:0] $end
   $var wire  2 "^ m_axi_arburst [1:0] $end
   $var wire  4 "` m_axi_arcache [3:0] $end
   $var wire 13 "Y m_axi_arid [12:0] $end
   $var wire  8 "\ m_axi_arlen [7:0] $end
   $var wire  1 "_ m_axi_arlock $end
   $var wire  3 "a m_axi_arprot [2:0] $end
   $var wire  1 "c m_axi_arready $end
   $var wire  3 "] m_axi_arsize [2:0] $end
   $var wire  1 "b m_axi_arvalid $end
   $var wire 64 "E m_axi_awaddr [63:0] $end
   $var wire  2 "I m_axi_awburst [1:0] $end
   $var wire  4 "K m_axi_awcache [3:0] $end
   $var wire 13 "D m_axi_awid [12:0] $end
   $var wire  8 "G m_axi_awlen [7:0] $end
   $var wire  1 "J m_axi_awlock $end
   $var wire  3 "L m_axi_awprot [2:0] $end
   $var wire  1 "N m_axi_awready $end
   $var wire  3 "H m_axi_awsize [2:0] $end
   $var wire  1 "M m_axi_awvalid $end
   $var wire 13 "U m_axi_bid [12:0] $end
   $var wire  1 "X m_axi_bready $end
   $var wire  2 "V m_axi_bresp [1:0] $end
   $var wire  1 "W m_axi_bvalid $end
   $var wire 64 "e m_axi_rdata [63:0] $end
   $var wire 13 "d m_axi_rid [12:0] $end
   $var wire  1 "h m_axi_rlast $end
   $var wire  1 "j m_axi_rready $end
   $var wire  2 "g m_axi_rresp [1:0] $end
   $var wire  1 "i m_axi_rvalid $end
   $var wire 64 "O m_axi_wdata [63:0] $end
   $var wire  1 "R m_axi_wlast $end
   $var wire  1 "T m_axi_wready $end
   $var wire  8 "Q m_axi_wstrb [7:0] $end
   $var wire  1 "S m_axi_wvalid $end
   $var wire  1 "t mem_read_control $end
   $var wire  1 "v mem_to_reg_control $end
   $var wire  1 "u mem_write_control $end
   $var wire 64 5 regA_data_out [63:0] $end
   $var wire 64 7 regB_data_out [63:0] $end
   $var wire  1 3 reg_write_control $end
   $var wire  1 "< reset $end
   $var wire 64 "B satp [63:0] $end
   $var wire 64 "@ stackptr [63:0] $end
   $scope module ALU $end
    $var wire  4 2 ex_alu_op_in [3:0] $end
    $var wire 64 9 ex_alu_result_out [63:0] $end
    $var wire 64 5 ex_operand1_in [63:0] $end
    $var wire 64 ; ex_operand2_in [63:0] $end
    $var wire 64 F ex_operand_temp [63:0] $end
    $var wire 64 9 result [63:0] $end
    $var wire 64 H result_add_word [63:0] $end
   $upscope $end
   $scope module ControlUnit $end
    $var wire  1 4 alu_src $end
    $var wire  1 4 alu_src_control $end
    $var wire  3 "y funct3 [2:0] $end
    $var wire  7 "x funct7 [6:0] $end
    $var wire 32 # if_instr [31:0] $end
    $var wire  1 B mem_read $end
    $var wire  1 B mem_read_control $end
    $var wire  1 D mem_to_reg $end
    $var wire  1 D mem_to_reg_control $end
    $var wire  1 C mem_write $end
    $var wire  1 C mem_write_control $end
    $var wire  7 E opcode [6:0] $end
    $var wire  1 "w pc_contrl $end
    $var wire  1 3 reg_write $end
    $var wire  1 3 reg_write_control $end
   $upscope $end
   $scope module Decoder $end
    $var wire 32 L address [31:0] $end
    $var wire  4 2 alu_op [3:0] $end
    $var wire 64 @ decoded_instruction [63:0] $end
    $var wire  3 > funct3 [2:0] $end
    $var wire  7 ? funct7 [6:0] $end
    $var wire  4 2 id_alu_op_out [3:0] $end
    $var wire  3 > id_reg_funct3_out [2:0] $end
    $var wire  7 1 id_reg_funct7_out [6:0] $end
    $var wire 32 = id_reg_imm_out [31:0] $end
    $var wire 64 , id_reg_imm_signed_out [63:0] $end
    $var wire 64 . id_reg_imm_unsigned_out [63:0] $end
    $var wire  7 0 id_reg_opcode_out [6:0] $end
    $var wire  5 ) id_reg_rd_out [4:0] $end
    $var wire  5 ' id_reg_rs1_out [4:0] $end
    $var wire  5 ( id_reg_rs2_out [4:0] $end
    $var wire 32 = imm [31:0] $end
    $var wire 64 , imm_signed [63:0] $end
    $var wire 64 . imm_unsigned [63:0] $end
    $var wire 32 # input_bin [31:0] $end
    $var wire  7 0 opcode [6:0] $end
    $var wire  5 ) rd [4:0] $end
    $var wire  5 ' rs1 [4:0] $end
    $var wire  5 ( rs2 [4:0] $end
   $upscope $end
   $scope module RegisterFile $end
    $var wire  1 "; clk $end
    $var wire 32 ": i [31:0] $end
    $var wire  5 ) rd_addr_in [4:0] $end
    $var wire  5 ' regA_addr_in [4:0] $end
    $var wire 64 5 regA_data_out [63:0] $end
    $var wire  5 ( regB_addr_in [4:0] $end
    $var wire 64 7 regB_data_out [63:0] $end
    $var wire 64 9 reg_write_data_in [63:0] $end
    $var wire  1 3 reg_write_enable $end
    $var wire 64 X registers(0) [63:0] $end
    $var wire 64 Z registers(1) [63:0] $end
    $var wire 64 l registers(10) [63:0] $end
    $var wire 64 n registers(11) [63:0] $end
    $var wire 64 p registers(12) [63:0] $end
    $var wire 64 r registers(13) [63:0] $end
    $var wire 64 t registers(14) [63:0] $end
    $var wire 64 v registers(15) [63:0] $end
    $var wire 64 x registers(16) [63:0] $end
    $var wire 64 z registers(17) [63:0] $end
    $var wire 64 | registers(18) [63:0] $end
    $var wire 64 ~ registers(19) [63:0] $end
    $var wire 64 \ registers(2) [63:0] $end
    $var wire 64 "" registers(20) [63:0] $end
    $var wire 64 "$ registers(21) [63:0] $end
    $var wire 64 "& registers(22) [63:0] $end
    $var wire 64 "( registers(23) [63:0] $end
    $var wire 64 "* registers(24) [63:0] $end
    $var wire 64 ", registers(25) [63:0] $end
    $var wire 64 ". registers(26) [63:0] $end
    $var wire 64 "0 registers(27) [63:0] $end
    $var wire 64 "2 registers(28) [63:0] $end
    $var wire 64 "4 registers(29) [63:0] $end
    $var wire 64 ^ registers(3) [63:0] $end
    $var wire 64 "6 registers(30) [63:0] $end
    $var wire 64 "8 registers(31) [63:0] $end
    $var wire 64 ` registers(4) [63:0] $end
    $var wire 64 b registers(5) [63:0] $end
    $var wire 64 d registers(6) [63:0] $end
    $var wire 64 f registers(7) [63:0] $end
    $var wire 64 h registers(8) [63:0] $end
    $var wire 64 j registers(9) [63:0] $end
    $var wire  1 "< reset $end
   $upscope $end
   $scope module fetch_inst $end
    $var wire  1 "; clk $end
    $var wire 64 R display_addr [63:0] $end
    $var wire 64 "> entry [63:0] $end
    $var wire 64 P fetched_instr [63:0] $end
    $var wire 32 L if_address_out [31:0] $end
    $var wire 32 # if_instr [31:0] $end
    $var wire 10 V index [9:0] $end
    $var wire 64 "Z m_axi_araddr [63:0] $end
    $var wire  2 "^ m_axi_arburst [1:0] $end
    $var wire  8 "\ m_axi_arlen [7:0] $end
    $var wire  1 "c m_axi_arready $end
    $var wire  3 "] m_axi_arsize [2:0] $end
    $var wire  1 "b m_axi_arvalid $end
    $var wire 64 "e m_axi_rdata [63:0] $end
    $var wire  1 "h m_axi_rlast $end
    $var wire  1 "j m_axi_rready $end
    $var wire  1 "i m_axi_rvalid $end
    $var wire 64 T next_display_addr [63:0] $end
    $var wire 64 % next_pc [63:0] $end
    $var wire  3 $ next_state [2:0] $end
    $var wire 64 N pc [63:0] $end
    $var wire 10 W pc_fetch [9:0] $end
    $var wire  1 "< reset $end
    $var wire  3 M state [2:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b000 $
b0000000000000000000000000000000000000000000000000000000000000000 %
b00000 '
b00000 (
b00000 )
b0000000000000000000000000000000000000000000000000000000000000000 *
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 .
b0000000 0
b0000000 1
b0000 2
03
04
b0000000000000000000000000000000000000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 7
b0000000000000000000000000000000000000000000000000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 ;
b00000000000000000000000000000000 =
b000 >
b0000000 ?
b0000000000000000000000000000000000000000000000000000000000000000 @
0B
0C
0D
b0000000 E
b0000000000000000000000000000000000000000000000000000000000000000 F
b0000000000000000000000000000000000000000000000000000000000000000 H
b0000000000000000000000000000000011111111111111111111111111111100 J
b11111111111111111111111111111100 L
b000 M
b0000000000000000000000000000000000000000000000010000001101011000 N
b0000000000000000000000000000000000000000000000000000000000000000 P
b0000000000000000000000000000000000000000000000000000000000000000 R
b0000000000000000000000000000000000000000000000000000000000000000 T
b0000000000 V
b0000000000 W
b0000000000000000000000000000000000000000000000000000000000000000 X
b0000000000000000000000000000000000000000000000000000000000000000 Z
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000000000000000000000000000000000000000000000000000000000000000 ^
b0000000000000000000000000000000000000000000000000000000000000000 `
b0000000000000000000000000000000000000000000000000000000000000000 b
b0000000000000000000000000000000000000000000000000000000000000000 d
b0000000000000000000000000000000000000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 h
b0000000000000000000000000000000000000000000000000000000000000000 j
b0000000000000000000000000000000000000000000000000000000000000000 l
b0000000000000000000000000000000000000000000000000000000000000000 n
b0000000000000000000000000000000000000000000000000000000000000000 p
b0000000000000000000000000000000000000000000000000000000000000000 r
b0000000000000000000000000000000000000000000000000000000000000000 t
b0000000000000000000000000000000000000000000000000000000000000000 v
b0000000000000000000000000000000000000000000000000000000000000000 x
b0000000000000000000000000000000000000000000000000000000000000000 z
b0000000000000000000000000000000000000000000000000000000000000000 |
b0000000000000000000000000000000000000000000000000000000000000000 ~
b0000000000000000000000000000000000000000000000000000000000000000 ""
b0000000000000000000000000000000000000000000000000000000000000000 "$
b0000000000000000000000000000000000000000000000000000000000000000 "&
b0000000000000000000000000000000000000000000000000000000000000000 "(
b0000000000000000000000000000000000000000000000000000000000000000 "*
b0000000000000000000000000000000000000000000000000000000000000000 ",
b0000000000000000000000000000000000000000000000000000000000000000 ".
b0000000000000000000000000000000000000000000000000000000000000000 "0
b0000000000000000000000000000000000000000000000000000000000000000 "2
b0000000000000000000000000000000000000000000000000000000000000000 "4
b0000000000000000000000000000000000000000000000000000000000000000 "6
b0000000000000000000000000000000000000000000000000000000000000000 "8
b00000000000000000000000000100000 ":
1";
1"<
0"=
b0000000000000000000000000000000000000000000000010000001101011000 ">
b0000000000000000000000000000000000111111110000000000000000000000 "@
b0000000000000000000000000000000000110100010101100111000000000000 "B
b0000000000000 "D
b0000000000000000000000000000000000000000000000000000000000000000 "E
b00000000 "G
b000 "H
b00 "I
0"J
b0000 "K
b000 "L
0"M
0"N
b0000000000000000000000000000000000000000000000000000000000000000 "O
b00000000 "Q
0"R
0"S
0"T
b0000000000000 "U
b00 "V
0"W
0"X
b0000000000000 "Y
b0000000000000000000000000000000000000000000000000000000000000000 "Z
b00000111 "\
b000 "]
b10 "^
0"_
b0000 "`
b000 "a
0"b
0"c
b0000000000000 "d
b0000000000000000000000000000000000000000000000000000000000000000 "e
b00 "g
0"h
0"i
0"j
0"k
0"l
b0000000000000000000000000000000000000000000000000000000000000000 "m
b0000 "o
b00000000000000000000000000001101 "p
b00000000000000000000000001000000 "q
b00000000000000000000000000001000 "r
b000 "s
0"t
0"u
0"v
0"w
b0000000 "x
b000 "y
#0
1"N
1"T
1"c
#250
0";
#250
#500
1";
b0000000000000000000000000000000000000000000000010000001101011000 "Z
#500
#750
0";
#750
#1000
1";
#1000
#1250
0";
0"<
#1250
#1500
b001 $
b0000000000000000000000000000000000000000000000000000000000000000 N
1";
1"b
#1500
1"=
#1750
0";
#1750
#2000
b001 M
1";
b0000000000000000000000000000000000000000000000000000000000000000 "Z
0"b
#2000
#2250
0";
#2250
#2500
1";
#2500
#2750
0";
#2750
#3000
1";
#3000
#3250
0";
#3250
#3500
1";
#3500
#3750
0";
#3750
#4000
1";
#4000
#4250
0";
#4250
#4500
1";
#4500
#4750
0";
#4750
#5000
1";
#5000
#5250
0";
#5250
#5500
1";
#5500
#5750
0";
#5750
#6000
1";
#6000
#6250
0";
#6250
#6500
1";
#6500
#6750
0";
#6750
#7000
1";
#7000
#7250
0";
#7250
#7500
1";
#7500
#7750
0";
#7750
#8000
1";
#8000
#8250
0";
#8250
#8500
1";
#8500
#8750
0";
#8750
#9000
1";
#9000
#9250
0";
#9250
#9500
1";
#9500
#9750
0";
#9750
#10000
1";
#10000
#10250
0";
#10250
#10500
1";
#10500
#10750
0";
#10750
#11000
1";
#11000
#11250
0";
#11250
#11500
1";
#11500
#11750
0";
#11750
#12000
1";
#12000
#12250
0";
#12250
#12500
1";
#12500
#12750
0";
#12750
#13000
1";
#13000
#13250
0";
#13250
#13500
1";
#13500
#13750
0";
#13750
#14000
1";
#14000
#14250
0";
#14250
#14500
1";
#14500
#14750
0";
#14750
#15000
1";
#15000
#15250
0";
#15250
#15500
1";
#15500
#15750
0";
#15750
#16000
1";
#16000
#16250
0";
#16250
#16500
1";
#16500
#16750
0";
#16750
#17000
1";
#17000
#17250
0";
#17250
#17500
1";
#17500
#17750
0";
#17750
#18000
1";
#18000
#18250
0";
#18250
#18500
1";
#18500
#18750
0";
#18750
#19000
1";
#19000
#19250
0";
#19250
#19500
1";
#19500
#19750
0";
#19750
#20000
1";
#20000
#20250
0";
#20250
#20500
1";
#20500
#20750
0";
#20750
#21000
1";
#21000
#21250
0";
#21250
#21500
1";
#21500
#21750
0";
#21750
#22000
1";
#22000
#22250
0";
#22250
#22500
1";
#22500
#22750
0";
#22750
#23000
1";
#23000
#23250
0";
#23250
#23500
1";
#23500
#23750
0";
#23750
#24000
1";
#24000
#24250
0";
#24250
#24500
1";
#24500
#24750
0";
#24750
#25000
1";
#25000
#25250
0";
#25250
#25500
1";
#25500
#25750
0";
#25750
#26000
1";
#26000
#26250
0";
#26250
#26500
1";
#26500
#26750
0";
#26750
#27000
1";
#27000
#27250
0";
#27250
#27500
1";
#27500
#27750
0";
#27750
#28000
1";
#28000
#28250
0";
#28250
#28500
1";
#28500
#28750
0";
#28750
#29000
1";
#29000
#29250
0";
#29250
#29500
1";
#29500
#29750
0";
#29750
#30000
1";
#30000
#30250
0";
#30250
#30500
1";
#30500
#30750
0";
#30750
#31000
1";
#31000
#31250
0";
#31250
#31500
1";
#31500
#31750
0";
#31750
#32000
1";
#32000
#32250
0";
#32250
#32500
1";
#32500
#32750
0";
#32750
#33000
1";
#33000
#33250
0";
#33250
#33500
1";
#33500
#33750
0";
#33750
#34000
1";
#34000
#34250
0";
#34250
#34500
1";
#34500
#34750
0";
#34750
#35000
1";
#35000
#35250
0";
#35250
#35500
1";
#35500
#35750
0";
#35750
#36000
1";
#36000
#36250
0";
#36250
#36500
1";
#36500
#36750
0";
#36750
#37000
1";
#37000
#37250
0";
#37250
#37500
1";
#37500
#37750
0";
#37750
#38000
1";
#38000
#38250
0";
#38250
#38500
1";
#38500
#38750
0";
#38750
#39000
1";
#39000
#39250
0";
#39250
#39500
1";
#39500
#39750
0";
#39750
#40000
1";
#40000
#40250
0";
#40250
#40500
1";
#40500
#40750
0";
#40750
#41000
1";
#41000
#41250
0";
#41250
#41500
1";
#41500
#41750
0";
#41750
#42000
1";
#42000
#42250
0";
#42250
#42500
1";
#42500
#42750
0";
#42750
#43000
1";
#43000
#43250
0";
#43250
#43500
1";
#43500
#43750
0";
#43750
#44000
1";
#44000
#44250
0";
#44250
#44500
1";
#44500
#44750
0";
#44750
#45000
1";
#45000
#45250
0";
#45250
#45500
1";
#45500
#45750
0";
#45750
#46000
1";
#46000
#46250
0";
#46250
#46500
1";
#46500
#46750
0";
#46750
#47000
1";
#47000
#47250
0";
#47250
#47500
1";
#47500
#47750
0";
#47750
#48000
1";
#48000
#48250
0";
#48250
#48500
1";
#48500
#48750
0";
#48750
#49000
1";
#49000
#49250
0";
#49250
#49500
1";
#49500
b0000000000000101000001111001001100000011010000000000000011101111 "e
1"i
#49750
0";
#49750
#50000
b100 $
1";
1"j
#50000
#50250
0";
#50250
#50500
b001 $
b100 M
b0000000000000101000001111001001100000011010000000000000011101111 P
b0000000000000000000000000000000000000000000000000000000000001000 T
b0000000010 V
1";
0"j
#50500
b1111100011000101000001010001001100000000000000000000010100010111 "e
#50750
0";
#50750
#51000
b001 M
b0000000000000000000000000000000000000000000000000000000000001000 R
1";
#51000
#51250
0";
#51250
#51500
b100 $
1";
1"j
#51500
#51750
0";
#51750
#52000
b001 $
b100 M
b1111100011000101000001010001001100000000000000000000010100010111 P
b0000000000000000000000000000000000000000000000000000000000010000 T
b0000000100 V
1";
0"j
#52000
b0000000010000001000001100001001100000000000000010011010110000011 "e
#52250
0";
#52250
#52500
b001 M
b0000000000000000000000000000000000000000000000000000000000010000 R
1";
#52500
#52750
0";
#52750
#53000
b100 $
1";
1"j
#53000
#53250
0";
#53250
#53500
b001 $
b100 M
b0000000010000001000001100001001100000000000000010011010110000011 P
b0000000000000000000000000000000000000000000000000000000000011000 T
b0000000110 V
1";
0"j
#53500
b0000000000000000000001101001011111111111000000010111000100010011 "e
#53750
0";
#53750
#54000
b001 M
b0000000000000000000000000000000000000000000000000000000000011000 R
1";
#54000
#54250
0";
#54250
#54500
b100 $
1";
1"j
#54500
#54750
0";
#54750
#55000
b001 $
b100 M
b0000000000000000000001101001011111111111000000010111000100010011 P
b0000000000000000000000000000000000000000000000000000000000100000 T
b0000001000 V
1";
0"j
#55000
b0000000000000000000101110001011101111000110001101000011010010011 "e
#55250
0";
#55250
#55500
b001 M
b0000000000000000000000000000000000000000000000000000000000100000 R
1";
#55500
#55750
0";
#55750
#56000
b100 $
1";
1"j
#56000
#56250
0";
#56250
#56500
b001 $
b100 M
b0000000000000000000101110001011101111000110001101000011010010011 P
b0000000000000000000000000000000000000000000000000000000000101000 T
b0000001010 V
1";
0"j
#56500
b0000001000000001000000010001001100000000100000010011010010000011 "e
#56750
0";
#56750
#57000
b001 M
b0000000000000000000000000000000000000000000000000000000000101000 R
1";
#57000
#57250
0";
#57250
#57500
b100 $
1";
1"j
#57500
#57750
0";
#57750
#58000
b001 $
b100 M
b0000001000000001000000010001001100000000100000010011010010000011 P
b0000000000000000000000000000000000000000000000000000000000110000 T
b0000001100 V
1";
0"j
#58000
b0000000000001000010001101011011100000000000000001000000001100111 "e
#58250
0";
#58250
#58500
b001 M
b0000000000000000000000000000000000000000000000000000000000110000 R
1";
#58500
#58750
0";
#58750
#59000
b100 $
1";
1"j
#59000
#59250
0";
#59250
#59500
b001 $
b100 M
b0000000000001000010001101011011100000000000000001000000001100111 P
b0000000000000000000000000000000000000000000000000000000000111000 T
b0000001110 V
1";
0"j
#59500
b1111110100011111111100000110111100011010000001101000011010010011 "e
1"h
#59750
0";
#59750
#60000
b001 M
b0000000000000000000000000000000000000000000000000000000000111000 R
1";
#60000
#60250
0";
#60250
#60500
b100 $
1";
1"j
#60500
#60750
0";
#60750
#61000
b100 M
b1111110100011111111100000110111100011010000001101000011010010011 P
b0000000000000000000000000000000000000000000000000000000001000000 T
b0000010000 V
1";
0"j
#61000
b000 $
b0000000000000000000000000000000000000000000000000000000001000000 %
0"i
#61250
0";
#61250
#61500
b000 M
b0000000000000000000000000000000000000000000000000000000001000000 N
b0000000000000000000000000000000000000000000000000000000001000000 R
1";
#61500
#61750
0";
#61750
#62000
b001 $
1";
b0000000000000000000000000000000000000000000000000000000001000000 "Z
1"b
#62000
#62250
0";
#62250
#62500
b001 M
1";
0"b
#62500
#62750
0";
#62750
#63000
1";
#63000
#63250
0";
#63250
#63500
1";
#63500
#63750
0";
#63750
#64000
1";
#64000
#64250
0";
#64250
#64500
1";
#64500
#64750
0";
#64750
#65000
1";
#65000
#65250
0";
#65250
#65500
1";
#65500
#65750
0";
#65750
#66000
1";
#66000
#66250
0";
#66250
#66500
1";
#66500
#66750
0";
#66750
#67000
1";
#67000
#67250
0";
#67250
#67500
1";
#67500
#67750
0";
#67750
#68000
1";
#68000
#68250
0";
#68250
#68500
1";
#68500
#68750
0";
#68750
#69000
1";
#69000
#69250
0";
#69250
#69500
1";
#69500
#69750
0";
#69750
#70000
1";
#70000
#70250
0";
#70250
#70500
1";
#70500
#70750
0";
#70750
#71000
1";
#71000
#71250
0";
#71250
#71500
1";
#71500
#71750
0";
#71750
#72000
1";
#72000
#72250
0";
#72250
#72500
1";
#72500
#72750
0";
#72750
#73000
1";
#73000
#73250
0";
#73250
#73500
1";
#73500
#73750
0";
#73750
#74000
1";
#74000
#74250
0";
#74250
#74500
1";
#74500
#74750
0";
#74750
#75000
1";
#75000
#75250
0";
#75250
#75500
1";
#75500
#75750
0";
#75750
#76000
1";
#76000
#76250
0";
#76250
#76500
1";
#76500
#76750
0";
#76750
#77000
1";
#77000
#77250
0";
#77250
#77500
1";
#77500
#77750
0";
#77750
#78000
1";
#78000
#78250
0";
#78250
#78500
1";
#78500
#78750
0";
#78750
#79000
1";
#79000
#79250
0";
#79250
#79500
1";
#79500
#79750
0";
#79750
#80000
1";
#80000
#80250
0";
#80250
#80500
1";
#80500
#80750
0";
#80750
#81000
1";
#81000
#81250
0";
#81250
#81500
1";
#81500
#81750
0";
#81750
#82000
1";
#82000
#82250
0";
#82250
#82500
1";
#82500
#82750
0";
#82750
#83000
1";
#83000
#83250
0";
#83250
#83500
1";
#83500
#83750
0";
#83750
#84000
1";
#84000
#84250
0";
#84250
#84500
1";
#84500
#84750
0";
#84750
#85000
1";
#85000
#85250
0";
#85250
#85500
1";
#85500
#85750
0";
#85750
#86000
1";
#86000
#86250
0";
#86250
#86500
1";
#86500
#86750
0";
#86750
#87000
1";
#87000
#87250
0";
#87250
#87500
1";
#87500
#87750
0";
#87750
#88000
1";
#88000
#88250
0";
#88250
#88500
1";
#88500
#88750
0";
#88750
#89000
1";
#89000
#89250
0";
#89250
#89500
1";
#89500
#89750
0";
#89750
#90000
1";
#90000
#90250
0";
#90250
#90500
1";
#90500
#90750
0";
#90750
#91000
1";
#91000
#91250
0";
#91250
#91500
1";
#91500
#91750
0";
#91750
#92000
1";
#92000
#92250
0";
#92250
#92500
1";
#92500
#92750
0";
#92750
#93000
1";
#93000
#93250
0";
#93250
#93500
1";
#93500
#93750
0";
#93750
#94000
1";
#94000
#94250
0";
#94250
#94500
1";
#94500
#94750
0";
#94750
#95000
1";
#95000
#95250
0";
#95250
#95500
1";
#95500
#95750
0";
#95750
#96000
1";
#96000
#96250
0";
#96250
#96500
1";
#96500
#96750
0";
#96750
#97000
1";
#97000
#97250
0";
#97250
#97500
1";
#97500
#97750
0";
#97750
#98000
1";
#98000
#98250
0";
#98250
#98500
1";
#98500
#98750
0";
#98750
#99000
1";
#99000
#99250
0";
#99250
#99500
1";
#99500
#99750
0";
#99750
#100000
1";
#100000
#100250
0";
#100250
#100500
1";
#100500
#100750
0";
#100750
#101000
1";
#101000
#101250
0";
#101250
#101500
1";
#101500
#101750
0";
#101750
#102000
1";
#102000
#102250
0";
#102250
#102500
1";
#102500
#102750
0";
#102750
#103000
1";
#103000
#103250
0";
#103250
#103500
1";
#103500
b0000000000000000000000000000000000000000000000000000000000000000 "e
0"h
1"i
#103750
0";
#103750
#104000
b100 $
1";
1"j
