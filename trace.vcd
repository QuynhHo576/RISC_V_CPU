$version Generated by VerilatedVcd $end
$date Fri Apr 11 15:09:15 2025
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 "P clk $end
  $var wire 64 "S entry [63:0] $end
  $var wire  1 "R hz32768timer $end
  $var wire 64 #$ m_axi_acaddr [63:0] $end
  $var wire  1 ## m_axi_acready $end
  $var wire  4 #& m_axi_acsnoop [3:0] $end
  $var wire  1 #" m_axi_acvalid $end
  $var wire 64 "o m_axi_araddr [63:0] $end
  $var wire  2 "s m_axi_arburst [1:0] $end
  $var wire  4 "u m_axi_arcache [3:0] $end
  $var wire 13 "n m_axi_arid [12:0] $end
  $var wire  8 "q m_axi_arlen [7:0] $end
  $var wire  1 "t m_axi_arlock $end
  $var wire  3 "v m_axi_arprot [2:0] $end
  $var wire  1 "x m_axi_arready $end
  $var wire  3 "r m_axi_arsize [2:0] $end
  $var wire  1 "w m_axi_arvalid $end
  $var wire 64 "Z m_axi_awaddr [63:0] $end
  $var wire  2 "^ m_axi_awburst [1:0] $end
  $var wire  4 "` m_axi_awcache [3:0] $end
  $var wire 13 "Y m_axi_awid [12:0] $end
  $var wire  8 "\ m_axi_awlen [7:0] $end
  $var wire  1 "_ m_axi_awlock $end
  $var wire  3 "a m_axi_awprot [2:0] $end
  $var wire  1 "c m_axi_awready $end
  $var wire  3 "] m_axi_awsize [2:0] $end
  $var wire  1 "b m_axi_awvalid $end
  $var wire 13 "j m_axi_bid [12:0] $end
  $var wire  1 "m m_axi_bready $end
  $var wire  2 "k m_axi_bresp [1:0] $end
  $var wire  1 "l m_axi_bvalid $end
  $var wire 64 "z m_axi_rdata [63:0] $end
  $var wire 13 "y m_axi_rid [12:0] $end
  $var wire  1 "} m_axi_rlast $end
  $var wire  1 #! m_axi_rready $end
  $var wire  2 "| m_axi_rresp [1:0] $end
  $var wire  1 "~ m_axi_rvalid $end
  $var wire 64 "d m_axi_wdata [63:0] $end
  $var wire  1 "g m_axi_wlast $end
  $var wire  1 "i m_axi_wready $end
  $var wire  8 "f m_axi_wstrb [7:0] $end
  $var wire  1 "h m_axi_wvalid $end
  $var wire  1 "Q reset $end
  $var wire 64 "W satp [63:0] $end
  $var wire 64 "U stackptr [63:0] $end
  $scope module top $end
   $var wire 32 #( ADDR_WIDTH [31:0] $end
   $var wire 32 #( DATA_WIDTH [31:0] $end
   $var wire 32 #' ID_WIDTH [31:0] $end
   $var wire 32 #) STRB_WIDTH [31:0] $end
   $var wire  1 7 alu_operand1_control $end
   $var wire  1 8 alu_operand2_control $end
   $var wire  1 "P clk $end
   $var wire 64 "S entry [63:0] $end
   $var wire  1 G ex_alu_result_out $end
   $var wire 64 C ex_mem_read_data_out [63:0] $end
   $var wire 64 ? ex_operand_1_in [63:0] $end
   $var wire 64 A ex_operand_2_in [63:0] $end
   $var wire  1 "R hz32768timer $end
   $var wire  4 3 id_alu_op_out [3:0] $end
   $var wire  1 > id_branch_compare_result $end
   $var wire  3 2 id_reg_funct3_out [2:0] $end
   $var wire  7 1 id_reg_funct7_out [6:0] $end
   $var wire 64 * id_reg_imm_out [63:0] $end
   $var wire 64 , id_reg_imm_signed_out [63:0] $end
   $var wire 64 . id_reg_imm_unsigned_out [63:0] $end
   $var wire  7 0 id_reg_opcode_out [6:0] $end
   $var wire  5 ) id_reg_rd_out [4:0] $end
   $var wire  5 ' id_reg_rs1_out [4:0] $end
   $var wire  5 ( id_reg_rs2_out [4:0] $end
   $var wire 64 _ if_address_out [63:0] $end
   $var wire 32 # if_instr [31:0] $end
   $var wire 64 #$ m_axi_acaddr [63:0] $end
   $var wire  1 ## m_axi_acready $end
   $var wire  4 #& m_axi_acsnoop [3:0] $end
   $var wire  1 #" m_axi_acvalid $end
   $var wire 64 "o m_axi_araddr [63:0] $end
   $var wire  2 "s m_axi_arburst [1:0] $end
   $var wire  4 "u m_axi_arcache [3:0] $end
   $var wire 13 "n m_axi_arid [12:0] $end
   $var wire  8 "q m_axi_arlen [7:0] $end
   $var wire  1 "t m_axi_arlock $end
   $var wire  3 "v m_axi_arprot [2:0] $end
   $var wire  1 "x m_axi_arready $end
   $var wire  3 "r m_axi_arsize [2:0] $end
   $var wire  1 "w m_axi_arvalid $end
   $var wire 64 "Z m_axi_awaddr [63:0] $end
   $var wire  2 "^ m_axi_awburst [1:0] $end
   $var wire  4 "` m_axi_awcache [3:0] $end
   $var wire 13 "Y m_axi_awid [12:0] $end
   $var wire  8 "\ m_axi_awlen [7:0] $end
   $var wire  1 "_ m_axi_awlock $end
   $var wire  3 "a m_axi_awprot [2:0] $end
   $var wire  1 "c m_axi_awready $end
   $var wire  3 "] m_axi_awsize [2:0] $end
   $var wire  1 "b m_axi_awvalid $end
   $var wire 13 "j m_axi_bid [12:0] $end
   $var wire  1 "m m_axi_bready $end
   $var wire  2 "k m_axi_bresp [1:0] $end
   $var wire  1 "l m_axi_bvalid $end
   $var wire 64 "z m_axi_rdata [63:0] $end
   $var wire 13 "y m_axi_rid [12:0] $end
   $var wire  1 "} m_axi_rlast $end
   $var wire  1 #! m_axi_rready $end
   $var wire  2 "| m_axi_rresp [1:0] $end
   $var wire  1 "~ m_axi_rvalid $end
   $var wire 64 "d m_axi_wdata [63:0] $end
   $var wire  1 "g m_axi_wlast $end
   $var wire  1 "i m_axi_wready $end
   $var wire  8 "f m_axi_wstrb [7:0] $end
   $var wire  1 "h m_axi_wvalid $end
   $var wire 64 E mem_or_alu_result_out [63:0] $end
   $var wire  1 5 mem_read_control $end
   $var wire  1 9 mem_to_reg_control $end
   $var wire  1 6 mem_write_control $end
   $var wire  1 #* pc_sel_out $end
   $var wire 64 : regA_data_out [63:0] $end
   $var wire 64 < regB_data_out [63:0] $end
   $var wire  1 4 reg_write_control $end
   $var wire  1 "Q reset $end
   $var wire 64 "W satp [63:0] $end
   $var wire 64 "U stackptr [63:0] $end
   $scope module ALU $end
    $var wire  4 3 ex_alu_op_in [3:0] $end
    $var wire 64 Y ex_alu_result_out [63:0] $end
    $var wire 64 ? ex_operand1_in [63:0] $end
    $var wire 64 A ex_operand2_in [63:0] $end
    $var wire 64 [ ex_operand_temp [63:0] $end
    $var wire 64 Y result [63:0] $end
    $var wire 64 ] result_add_word [63:0] $end
   $upscope $end
   $scope module BranchCompare $end
    $var wire  3 2 branch_compare_funct3 [2:0] $end
    $var wire  7 0 branch_compare_opcode [6:0] $end
    $var wire 64 : branch_compare_regA_data [63:0] $end
    $var wire  1 P branch_compare_regA_data_signed $end
    $var wire  1 R branch_compare_regA_data_unsigned $end
    $var wire 64 < branch_compare_regB_data [63:0] $end
    $var wire  1 Q branch_compare_regB_data_signed $end
    $var wire  1 #- branch_compare_regB_data_unsigned $end
    $var wire  1 > branch_compare_result $end
    $var wire  1 S equal_result $end
    $var wire  1 V greater_equal_result $end
    $var wire  1 X greater_equal_result_unsigned $end
    $var wire  1 U less_than_result $end
    $var wire  1 W less_than_result_unsigned $end
    $var wire  1 T not_equal_result $end
   $upscope $end
   $scope module ControlUnit $end
    $var wire  1 7 alu_operand1_control $end
    $var wire  1 7 alu_operand1_control_out $end
    $var wire  1 8 alu_operand2_control $end
    $var wire  1 8 alu_operand2_control_out $end
    $var wire  1 > branch_compare_result $end
    $var wire  3 #, funct3 [2:0] $end
    $var wire  7 #+ funct7 [6:0] $end
    $var wire 32 # if_instr [31:0] $end
    $var wire  1 5 mem_read $end
    $var wire  1 5 mem_read_control $end
    $var wire  1 9 mem_to_reg $end
    $var wire  1 9 mem_to_reg_control $end
    $var wire  1 6 mem_write $end
    $var wire  1 6 mem_write_control $end
    $var wire  7 M opcode [6:0] $end
    $var wire  2 N pcSel [1:0] $end
    $var wire  1 O pc_contrl_out $end
    $var wire  1 #* pc_sel_out $end
    $var wire  1 4 reg_write $end
    $var wire  1 4 reg_write_control $end
   $upscope $end
   $scope module D_MEMORY $end
    $var wire  1 "P clk $end
    $var wire 64 H ex_mem_address [63:0] $end
    $var wire  1 5 ex_mem_memory_read $end
    $var wire  1 6 ex_mem_memory_write $end
    $var wire 64 C ex_mem_read_data_out [63:0] $end
    $var wire 64 < ex_mem_write_data [63:0] $end
    $var wire  1 "Q reset $end
   $upscope $end
   $scope module Decoder $end
    $var wire 32 a address [31:0] $end
    $var wire  4 3 alu_op [3:0] $end
    $var wire 64 K decoded_instruction [63:0] $end
    $var wire  3 2 funct3 [2:0] $end
    $var wire  7 1 funct7 [6:0] $end
    $var wire  4 3 id_alu_op_out [3:0] $end
    $var wire  3 2 id_reg_funct3_out [2:0] $end
    $var wire  7 1 id_reg_funct7_out [6:0] $end
    $var wire 32 J id_reg_imm_out [31:0] $end
    $var wire 64 , id_reg_imm_signed_out [63:0] $end
    $var wire 64 . id_reg_imm_unsigned_out [63:0] $end
    $var wire  7 0 id_reg_opcode_out [6:0] $end
    $var wire  5 ) id_reg_rd_out [4:0] $end
    $var wire  5 ' id_reg_rs1_out [4:0] $end
    $var wire  5 ( id_reg_rs2_out [4:0] $end
    $var wire 32 J imm [31:0] $end
    $var wire 64 , imm_signed [63:0] $end
    $var wire 64 . imm_unsigned [63:0] $end
    $var wire 32 # input_bin [31:0] $end
    $var wire  7 0 opcode [6:0] $end
    $var wire  5 ) rd [4:0] $end
    $var wire  5 ' rs1 [4:0] $end
    $var wire  5 ( rs2 [4:0] $end
   $upscope $end
   $scope module RegisterFile $end
    $var wire  1 "P clk $end
    $var wire 32 "O i [31:0] $end
    $var wire  5 ) rd_addr_in [4:0] $end
    $var wire  5 ' regA_addr_in [4:0] $end
    $var wire 64 : regA_data_out [63:0] $end
    $var wire  5 ( regB_addr_in [4:0] $end
    $var wire 64 < regB_data_out [63:0] $end
    $var wire 64 E reg_write_data_in [63:0] $end
    $var wire  1 4 reg_write_enable $end
    $var wire 64 m registers(0) [63:0] $end
    $var wire 64 o registers(1) [63:0] $end
    $var wire 64 "# registers(10) [63:0] $end
    $var wire 64 "% registers(11) [63:0] $end
    $var wire 64 "' registers(12) [63:0] $end
    $var wire 64 ") registers(13) [63:0] $end
    $var wire 64 "+ registers(14) [63:0] $end
    $var wire 64 "- registers(15) [63:0] $end
    $var wire 64 "/ registers(16) [63:0] $end
    $var wire 64 "1 registers(17) [63:0] $end
    $var wire 64 "3 registers(18) [63:0] $end
    $var wire 64 "5 registers(19) [63:0] $end
    $var wire 64 q registers(2) [63:0] $end
    $var wire 64 "7 registers(20) [63:0] $end
    $var wire 64 "9 registers(21) [63:0] $end
    $var wire 64 "; registers(22) [63:0] $end
    $var wire 64 "= registers(23) [63:0] $end
    $var wire 64 "? registers(24) [63:0] $end
    $var wire 64 "A registers(25) [63:0] $end
    $var wire 64 "C registers(26) [63:0] $end
    $var wire 64 "E registers(27) [63:0] $end
    $var wire 64 "G registers(28) [63:0] $end
    $var wire 64 "I registers(29) [63:0] $end
    $var wire 64 s registers(3) [63:0] $end
    $var wire 64 "K registers(30) [63:0] $end
    $var wire 64 "M registers(31) [63:0] $end
    $var wire 64 u registers(4) [63:0] $end
    $var wire 64 w registers(5) [63:0] $end
    $var wire 64 y registers(6) [63:0] $end
    $var wire 64 { registers(7) [63:0] $end
    $var wire 64 } registers(8) [63:0] $end
    $var wire 64 "! registers(9) [63:0] $end
    $var wire  1 "Q reset $end
   $upscope $end
   $scope module fetch_inst $end
    $var wire  1 "P clk $end
    $var wire 64 g display_addr [63:0] $end
    $var wire 64 "S entry [63:0] $end
    $var wire 64 e fetched_instr [63:0] $end
    $var wire 32 a if_address_out [31:0] $end
    $var wire 32 # if_instr [31:0] $end
    $var wire 10 k index [9:0] $end
    $var wire 64 "o m_axi_araddr [63:0] $end
    $var wire  2 "s m_axi_arburst [1:0] $end
    $var wire  8 "q m_axi_arlen [7:0] $end
    $var wire  1 "x m_axi_arready $end
    $var wire  3 "r m_axi_arsize [2:0] $end
    $var wire  1 "w m_axi_arvalid $end
    $var wire 64 "z m_axi_rdata [63:0] $end
    $var wire  1 "} m_axi_rlast $end
    $var wire  1 #! m_axi_rready $end
    $var wire  1 "~ m_axi_rvalid $end
    $var wire 64 i next_display_addr [63:0] $end
    $var wire 64 % next_pc [63:0] $end
    $var wire  3 $ next_state [2:0] $end
    $var wire 64 c pc [63:0] $end
    $var wire 10 l pc_fetch [9:0] $end
    $var wire 64 H pc_from_alu_result [63:0] $end
    $var wire  1 #* pcsel $end
    $var wire  1 "Q reset $end
    $var wire  3 b state [2:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b000 $
b0000000000000000000000000000000000000000000000000000000000000000 %
b00000 '
b00000 (
b00000 )
b0000000000000000000000000000000000000000000000000000000000000000 *
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 .
b0000000 0
b0000000 1
b000 2
b0000 3
04
05
06
07
08
09
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000000000000000000000000000000000000000000000000000 <
0>
b0000000000000000000000000000000000000000000000000000000000000000 ?
b0000000000000000000000000000000000000000000000000000000000000000 A
b0000000000000000000000000000000000000000000000000000000000000000 C
b0000000000000000000000000000000000000000000000000000000000000000 E
0G
b0000000000000000000000000000000000000000000000000000000000000000 H
b00000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 K
b0000000 M
b00 N
0O
0P
0Q
0R
1S
0T
0U
1V
0W
1X
b0000000000000000000000000000000000000000000000000000000000000000 Y
b0000000000000000000000000000000000000000000000000000000000000000 [
b0000000000000000000000000000000000000000000000000000000000000000 ]
b0000000000000000000000000000000011111111111111111111111111111100 _
b11111111111111111111111111111100 a
b000 b
b0000000000000000000000000000000000000000000000010000001101011000 c
b0000000000000000000000000000000000000000000000000000000000000000 e
b0000000000000000000000000000000000000000000000000000000000000000 g
b0000000000000000000000000000000000000000000000000000000000000000 i
b0000000000 k
b0000000000 l
b0000000000000000000000000000000000000000000000000000000000000000 m
b0000000000000000000000000000000000000000000000000000000000000000 o
b0000000000000000000000000000000000000000000000000000000000000000 q
b0000000000000000000000000000000000000000000000000000000000000000 s
b0000000000000000000000000000000000000000000000000000000000000000 u
b0000000000000000000000000000000000000000000000000000000000000000 w
b0000000000000000000000000000000000000000000000000000000000000000 y
b0000000000000000000000000000000000000000000000000000000000000000 {
b0000000000000000000000000000000000000000000000000000000000000000 }
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000000 "#
b0000000000000000000000000000000000000000000000000000000000000000 "%
b0000000000000000000000000000000000000000000000000000000000000000 "'
b0000000000000000000000000000000000000000000000000000000000000000 ")
b0000000000000000000000000000000000000000000000000000000000000000 "+
b0000000000000000000000000000000000000000000000000000000000000000 "-
b0000000000000000000000000000000000000000000000000000000000000000 "/
b0000000000000000000000000000000000000000000000000000000000000000 "1
b0000000000000000000000000000000000000000000000000000000000000000 "3
b0000000000000000000000000000000000000000000000000000000000000000 "5
b0000000000000000000000000000000000000000000000000000000000000000 "7
b0000000000000000000000000000000000000000000000000000000000000000 "9
b0000000000000000000000000000000000000000000000000000000000000000 ";
b0000000000000000000000000000000000000000000000000000000000000000 "=
b0000000000000000000000000000000000000000000000000000000000000000 "?
b0000000000000000000000000000000000000000000000000000000000000000 "A
b0000000000000000000000000000000000000000000000000000000000000000 "C
b0000000000000000000000000000000000000000000000000000000000000000 "E
b0000000000000000000000000000000000000000000000000000000000000000 "G
b0000000000000000000000000000000000000000000000000000000000000000 "I
b0000000000000000000000000000000000000000000000000000000000000000 "K
b0000000000000000000000000000000000000000000000000000000000000000 "M
b00000000000000000000000000100000 "O
1"P
1"Q
0"R
b0000000000000000000000000000000000000000000000010000001101011000 "S
b0000000000000000000000000000000000111111110000000000000000000000 "U
b0000000000000000000000000000000000110100010101100111000000000000 "W
b0000000000000 "Y
b0000000000000000000000000000000000000000000000000000000000000000 "Z
b00000000 "\
b000 "]
b00 "^
0"_
b0000 "`
b000 "a
0"b
0"c
b0000000000000000000000000000000000000000000000000000000000000000 "d
b00000000 "f
0"g
0"h
0"i
b0000000000000 "j
b00 "k
0"l
0"m
b0000000000000 "n
b0000000000000000000000000000000000000000000000000000000000000000 "o
b00000111 "q
b000 "r
b10 "s
0"t
b0000 "u
b000 "v
0"w
0"x
b0000000000000 "y
b0000000000000000000000000000000000000000000000000000000000000000 "z
b00 "|
0"}
0"~
0#!
0#"
0##
b0000000000000000000000000000000000000000000000000000000000000000 #$
b0000 #&
b00000000000000000000000000001101 #'
b00000000000000000000000001000000 #(
b00000000000000000000000000001000 #)
0#*
b0000000 #+
b000 #,
0#-
#0
1"c
1"i
1"x
#250
0"P
#250
#500
1"P
b0000000000000000000000000000000000000000000000010000001101011000 "o
#500
#750
0"P
#750
#1000
1"P
#1000
#1250
0"P
0"Q
#1250
#1500
b001 $
b0000000000000000000000000000000000000000000000000000000000000000 c
1"P
1"w
#1500
1"R
#1750
0"P
#1750
#2000
b001 b
1"P
b0000000000000000000000000000000000000000000000000000000000000000 "o
0"w
#2000
#2250
0"P
#2250
#2500
1"P
#2500
#2750
0"P
#2750
#3000
1"P
#3000
#3250
0"P
#3250
#3500
1"P
#3500
#3750
0"P
#3750
#4000
1"P
#4000
#4250
0"P
#4250
#4500
1"P
#4500
#4750
0"P
#4750
#5000
1"P
#5000
#5250
0"P
#5250
#5500
1"P
#5500
#5750
0"P
#5750
#6000
1"P
#6000
#6250
0"P
#6250
#6500
1"P
#6500
#6750
0"P
#6750
#7000
1"P
#7000
#7250
0"P
#7250
#7500
1"P
#7500
#7750
0"P
#7750
#8000
1"P
#8000
#8250
0"P
#8250
#8500
1"P
#8500
#8750
0"P
#8750
#9000
1"P
#9000
#9250
0"P
#9250
#9500
1"P
#9500
#9750
0"P
#9750
#10000
1"P
#10000
#10250
0"P
#10250
#10500
1"P
#10500
#10750
0"P
#10750
#11000
1"P
#11000
#11250
0"P
#11250
#11500
1"P
#11500
#11750
0"P
#11750
#12000
1"P
#12000
#12250
0"P
#12250
#12500
1"P
#12500
#12750
0"P
#12750
#13000
1"P
#13000
#13250
0"P
#13250
#13500
1"P
#13500
#13750
0"P
#13750
#14000
1"P
#14000
#14250
0"P
#14250
#14500
1"P
#14500
#14750
0"P
#14750
#15000
1"P
#15000
#15250
0"P
#15250
#15500
1"P
#15500
#15750
0"P
#15750
#16000
1"P
#16000
#16250
0"P
#16250
#16500
1"P
#16500
#16750
0"P
#16750
#17000
1"P
#17000
#17250
0"P
#17250
#17500
1"P
#17500
#17750
0"P
#17750
#18000
1"P
#18000
#18250
0"P
#18250
#18500
1"P
#18500
#18750
0"P
#18750
#19000
1"P
#19000
#19250
0"P
#19250
#19500
1"P
#19500
#19750
0"P
#19750
#20000
1"P
#20000
#20250
0"P
#20250
#20500
1"P
#20500
#20750
0"P
#20750
#21000
1"P
#21000
#21250
0"P
#21250
#21500
1"P
#21500
#21750
0"P
#21750
#22000
1"P
#22000
#22250
0"P
#22250
#22500
1"P
#22500
#22750
0"P
#22750
#23000
1"P
#23000
#23250
0"P
#23250
#23500
1"P
#23500
#23750
0"P
#23750
#24000
1"P
#24000
#24250
0"P
#24250
#24500
1"P
#24500
#24750
0"P
#24750
#25000
1"P
#25000
#25250
0"P
#25250
#25500
1"P
#25500
#25750
0"P
#25750
#26000
1"P
#26000
#26250
0"P
#26250
#26500
1"P
#26500
#26750
0"P
#26750
#27000
1"P
#27000
#27250
0"P
#27250
#27500
1"P
#27500
#27750
0"P
#27750
#28000
1"P
#28000
#28250
0"P
#28250
#28500
1"P
#28500
#28750
0"P
#28750
#29000
1"P
#29000
#29250
0"P
#29250
#29500
1"P
#29500
#29750
0"P
#29750
#30000
1"P
#30000
#30250
0"P
#30250
#30500
1"P
#30500
#30750
0"P
#30750
#31000
1"P
#31000
#31250
0"P
#31250
#31500
1"P
#31500
#31750
0"P
#31750
#32000
1"P
#32000
#32250
0"P
#32250
#32500
1"P
#32500
#32750
0"P
#32750
#33000
1"P
#33000
#33250
0"P
#33250
#33500
1"P
#33500
#33750
0"P
#33750
#34000
1"P
#34000
#34250
0"P
#34250
#34500
1"P
#34500
#34750
0"P
#34750
#35000
1"P
#35000
#35250
0"P
#35250
#35500
1"P
#35500
#35750
0"P
#35750
#36000
1"P
#36000
#36250
0"P
#36250
#36500
1"P
#36500
#36750
0"P
#36750
#37000
1"P
#37000
#37250
0"P
#37250
#37500
1"P
#37500
#37750
0"P
#37750
#38000
1"P
#38000
#38250
0"P
#38250
#38500
1"P
#38500
#38750
0"P
#38750
#39000
1"P
#39000
#39250
0"P
#39250
#39500
1"P
#39500
#39750
0"P
#39750
#40000
1"P
#40000
#40250
0"P
#40250
#40500
1"P
#40500
#40750
0"P
#40750
#41000
1"P
#41000
#41250
0"P
#41250
#41500
1"P
#41500
#41750
0"P
#41750
#42000
1"P
#42000
#42250
0"P
#42250
#42500
1"P
#42500
#42750
0"P
#42750
#43000
1"P
#43000
#43250
0"P
#43250
#43500
1"P
#43500
#43750
0"P
#43750
#44000
1"P
#44000
#44250
0"P
#44250
#44500
1"P
#44500
#44750
0"P
#44750
#45000
1"P
#45000
#45250
0"P
#45250
#45500
1"P
#45500
#45750
0"P
#45750
#46000
1"P
#46000
#46250
0"P
#46250
#46500
1"P
#46500
#46750
0"P
#46750
#47000
1"P
#47000
#47250
0"P
#47250
#47500
1"P
#47500
#47750
0"P
#47750
#48000
1"P
#48000
#48250
0"P
#48250
#48500
1"P
#48500
#48750
0"P
#48750
#49000
1"P
#49000
#49250
0"P
#49250
#49500
1"P
#49500
b0000000000000101000001111001001100000011010000000000000011101111 "z
1"~
#49750
0"P
#49750
#50000
b100 $
1"P
1#!
#50000
#50250
0"P
#50250
#50500
b001 $
b100 b
b0000000000000101000001111001001100000011010000000000000011101111 e
b0000000000000000000000000000000000000000000000000000000000001000 i
b0000000010 k
1"P
0#!
#50500
b1111100011000101000001010001001100000000000000000000010100010111 "z
#50750
0"P
#50750
#51000
b001 b
b0000000000000000000000000000000000000000000000000000000000001000 g
1"P
#51000
#51250
0"P
#51250
#51500
b100 $
1"P
1#!
#51500
#51750
0"P
#51750
#52000
b001 $
b100 b
b1111100011000101000001010001001100000000000000000000010100010111 e
b0000000000000000000000000000000000000000000000000000000000010000 i
b0000000100 k
1"P
0#!
#52000
b0000000010000001000001100001001100000000000000010011010110000011 "z
#52250
0"P
#52250
#52500
b001 b
b0000000000000000000000000000000000000000000000000000000000010000 g
1"P
#52500
#52750
0"P
#52750
#53000
b100 $
1"P
1#!
#53000
#53250
0"P
#53250
#53500
b001 $
b100 b
b0000000010000001000001100001001100000000000000010011010110000011 e
b0000000000000000000000000000000000000000000000000000000000011000 i
b0000000110 k
1"P
0#!
#53500
b0000000000000000000001101001011111111111000000010111000100010011 "z
#53750
0"P
#53750
#54000
b001 b
b0000000000000000000000000000000000000000000000000000000000011000 g
1"P
#54000
#54250
0"P
#54250
#54500
b100 $
1"P
1#!
#54500
#54750
0"P
#54750
#55000
b001 $
b100 b
b0000000000000000000001101001011111111111000000010111000100010011 e
b0000000000000000000000000000000000000000000000000000000000100000 i
b0000001000 k
1"P
0#!
#55000
b0000000000000000000101110001011101111000110001101000011010010011 "z
#55250
0"P
#55250
#55500
b001 b
b0000000000000000000000000000000000000000000000000000000000100000 g
1"P
#55500
#55750
0"P
#55750
#56000
b100 $
1"P
1#!
#56000
#56250
0"P
#56250
#56500
b001 $
b100 b
b0000000000000000000101110001011101111000110001101000011010010011 e
b0000000000000000000000000000000000000000000000000000000000101000 i
b0000001010 k
1"P
0#!
#56500
b0000001000000001000000010001001100000000100000010011010010000011 "z
#56750
0"P
#56750
#57000
b001 b
b0000000000000000000000000000000000000000000000000000000000101000 g
1"P
#57000
#57250
0"P
#57250
#57500
b100 $
1"P
1#!
#57500
#57750
0"P
#57750
#58000
b001 $
b100 b
b0000001000000001000000010001001100000000100000010011010010000011 e
b0000000000000000000000000000000000000000000000000000000000110000 i
b0000001100 k
1"P
0#!
#58000
b0000000000001000010001101011011100000000000000001000000001100111 "z
#58250
0"P
#58250
#58500
b001 b
b0000000000000000000000000000000000000000000000000000000000110000 g
1"P
#58500
#58750
0"P
#58750
#59000
b100 $
1"P
1#!
#59000
#59250
0"P
#59250
#59500
b001 $
b100 b
b0000000000001000010001101011011100000000000000001000000001100111 e
b0000000000000000000000000000000000000000000000000000000000111000 i
b0000001110 k
1"P
0#!
#59500
b1111110100011111111100000110111100011010000001101000011010010011 "z
1"}
#59750
0"P
#59750
#60000
b001 b
b0000000000000000000000000000000000000000000000000000000000111000 g
1"P
#60000
#60250
0"P
#60250
#60500
b100 $
1"P
1#!
#60500
#60750
0"P
#60750
#61000
b100 b
b1111110100011111111100000110111100011010000001101000011010010011 e
b0000000000000000000000000000000000000000000000000000000001000000 i
b0000010000 k
1"P
0#!
#61000
b000 $
b0000000000000000000000000000000000000000000000000000000001000000 %
0"~
#61250
0"P
#61250
#61500
b000 b
b0000000000000000000000000000000000000000000000000000000001000000 c
b0000000000000000000000000000000000000000000000000000000001000000 g
1"P
#61500
#61750
0"P
#61750
#62000
b001 $
1"P
b0000000000000000000000000000000000000000000000000000000001000000 "o
1"w
#62000
#62250
0"P
#62250
#62500
b001 b
1"P
0"w
#62500
#62750
0"P
#62750
#63000
1"P
#63000
#63250
0"P
#63250
#63500
1"P
#63500
#63750
0"P
#63750
#64000
1"P
#64000
#64250
0"P
#64250
#64500
1"P
#64500
#64750
0"P
#64750
#65000
1"P
#65000
#65250
0"P
#65250
#65500
1"P
#65500
#65750
0"P
#65750
#66000
1"P
#66000
#66250
0"P
#66250
#66500
1"P
#66500
#66750
0"P
#66750
#67000
1"P
#67000
#67250
0"P
#67250
#67500
1"P
#67500
#67750
0"P
#67750
#68000
1"P
#68000
#68250
0"P
#68250
#68500
1"P
#68500
#68750
0"P
#68750
#69000
1"P
#69000
#69250
0"P
#69250
#69500
1"P
#69500
#69750
0"P
#69750
#70000
1"P
#70000
#70250
0"P
#70250
#70500
1"P
#70500
#70750
0"P
#70750
#71000
1"P
#71000
#71250
0"P
#71250
#71500
1"P
#71500
#71750
0"P
#71750
#72000
1"P
#72000
#72250
0"P
#72250
#72500
1"P
#72500
#72750
0"P
#72750
#73000
1"P
#73000
#73250
0"P
#73250
#73500
1"P
#73500
#73750
0"P
#73750
#74000
1"P
#74000
#74250
0"P
#74250
#74500
1"P
#74500
#74750
0"P
#74750
#75000
1"P
#75000
#75250
0"P
#75250
#75500
1"P
#75500
#75750
0"P
#75750
#76000
1"P
#76000
#76250
0"P
#76250
#76500
1"P
#76500
#76750
0"P
#76750
#77000
1"P
#77000
#77250
0"P
#77250
#77500
1"P
#77500
#77750
0"P
#77750
#78000
1"P
#78000
#78250
0"P
#78250
#78500
1"P
#78500
#78750
0"P
#78750
#79000
1"P
#79000
#79250
0"P
#79250
#79500
1"P
#79500
#79750
0"P
#79750
#80000
1"P
#80000
#80250
0"P
#80250
#80500
1"P
#80500
#80750
0"P
#80750
#81000
1"P
#81000
#81250
0"P
#81250
#81500
1"P
#81500
#81750
0"P
#81750
#82000
1"P
#82000
#82250
0"P
#82250
#82500
1"P
#82500
#82750
0"P
#82750
#83000
1"P
#83000
#83250
0"P
#83250
#83500
1"P
#83500
#83750
0"P
#83750
#84000
1"P
#84000
#84250
0"P
#84250
#84500
1"P
#84500
#84750
0"P
#84750
#85000
1"P
#85000
#85250
0"P
#85250
#85500
1"P
#85500
#85750
0"P
#85750
#86000
1"P
#86000
#86250
0"P
#86250
#86500
1"P
#86500
#86750
0"P
#86750
#87000
1"P
#87000
#87250
0"P
#87250
#87500
1"P
#87500
#87750
0"P
#87750
#88000
1"P
#88000
#88250
0"P
#88250
#88500
1"P
#88500
#88750
0"P
#88750
#89000
1"P
#89000
#89250
0"P
#89250
#89500
1"P
#89500
#89750
0"P
#89750
#90000
1"P
#90000
#90250
0"P
#90250
#90500
1"P
#90500
#90750
0"P
#90750
#91000
1"P
#91000
#91250
0"P
#91250
#91500
1"P
#91500
#91750
0"P
#91750
#92000
1"P
#92000
#92250
0"P
#92250
#92500
1"P
#92500
#92750
0"P
#92750
#93000
1"P
#93000
#93250
0"P
#93250
#93500
1"P
#93500
#93750
0"P
#93750
#94000
1"P
#94000
#94250
0"P
#94250
#94500
1"P
#94500
#94750
0"P
#94750
#95000
1"P
#95000
#95250
0"P
#95250
#95500
1"P
#95500
#95750
0"P
#95750
#96000
1"P
#96000
#96250
0"P
#96250
#96500
1"P
#96500
#96750
0"P
#96750
#97000
1"P
#97000
#97250
0"P
#97250
#97500
1"P
#97500
#97750
0"P
#97750
#98000
1"P
#98000
#98250
0"P
#98250
#98500
1"P
#98500
#98750
0"P
#98750
#99000
1"P
#99000
#99250
0"P
#99250
#99500
1"P
#99500
#99750
0"P
#99750
#100000
1"P
#100000
#100250
0"P
#100250
#100500
1"P
#100500
#100750
0"P
#100750
#101000
1"P
#101000
#101250
0"P
#101250
#101500
1"P
#101500
#101750
0"P
#101750
#102000
1"P
#102000
#102250
0"P
#102250
#102500
1"P
#102500
#102750
0"P
#102750
#103000
1"P
#103000
#103250
0"P
#103250
#103500
1"P
#103500
b0000000000000000000000000000000000000000000000000000000000000000 "z
0"}
1"~
#103750
0"P
#103750
#104000
b100 $
1"P
1#!
