1. Master
- A master is a device that initiates transactions on the bus. 
- It sends requests (e.g., read or write requests) to the slave and can provide addresses, data, or control signals.
- Examples of Masters in AXI Systems:
CPU/Processor Core: Requests data/instructions from memory or peripheral devices.

////////////////////////////////////////////////////////////////////

2. Slave
- A slave is a device that responds to the master's requests. 
- It processes the address and control signals from the master and 
either provides data (for a read transaction) or accepts data (for a write transaction).
- Examples of Slaves in AXI Systems:
Memory (RAM): Provides or stores data requested by the master.

////////////////////////////////////////////////////////////////////

Example: CPU and Memory
- Master: CPU
The CPU fetches instructions and data from memory to execute programs.
The CPU initiates both read and write requests.
- Slave: Memory
The memory responds to the CPU’s requests by providing data (read) or storing data (write).

////////////////////////////////////////////////////////////////////

3. A read transaction is initiated by the master to retrieve data from a slave device
STEPS:
a. Master Requests Data:
- The master sends a read request via the AR (Address Read) channel.
- Signals like araddr, arid, arlen, etc., specify the address of the data, the ID of the transaction, and the size/length of the read burst.
b. Slave Processes the Request:
The slave receives the read address and prepares the requested data.
c. Slave Sends the Data:
- The slave responds via the R (Read) channel.
- Signals like rdata, rvalid, and rresp deliver the requested data and indicate whether the transaction was successful.
- rlast is asserted if this is the last transfer in a burst.
d. Master Acknowledges the Data:
The master acknowledges receipt of the data using the rready signal.

////////////////////////////////////////////////////////////////////

4. Write Transaction: A write transaction is initiated by the master to send data to a slave device (e.g., memory, peripheral).
STEPS:
a. Master Sends Write Request:
- The master sends a write request via the AW (Address Write) channel.
- Signals like awaddr, awid, awlen, etc., specify the address where the data will be written, the transaction ID, and the size/length of the burst.
b. Master Sends Data:
- The master transmits the data via the W (Write) channel.
- Signals like wdata (data being sent), wstrb (byte enable), and wlast (indicates the last transfer in a burst) are used.
- The wvalid signal indicates that the data is valid.
c. Slave Acknowledges Data:
- The slave accepts the data using the wready signal.
- Once all data is received, the slave processes the write.
d. Slave Sends Response:
- The slave sends a response back to the master via the B (Write Response) channel.
- Signals like bresp indicate whether the write was successful.

////////////////////////////////////////////////////////////////////

5. Read vs. Write Example
Scenario: CPU Reads/Writes Data from/to Memory
a. Read Transaction (CPU Reads Memory):
- The CPU (master) sends the address of the data it wants to read via the AR channel.
- The memory (slave) retrieves the data and sends it back via the R channel.
b. Write Transaction (CPU Writes to Memory):
- The CPU (master) sends the address of where it wants to write and the data itself via the AW and W channels, respectively.
- The memory (slave) stores the data and sends a response via the B channel.

////////////////////////////////////////////////////////////////////

A burst type transaction refers to a series of data transfers that occur consecutively in a single transaction


In this project, burst type is wrapping burst at value 2 (system.cpp - Line 134), any non-wrapping burst are not supported
The burst length must equal 8 transfers (m_axi_arlen + 1 == 8)
The address (m_axi_araddr) must be aligned to the burst size
The address is masked with ~0x3fULL (0b111111 in binary), which aligns it to a 64-byte boundary.
The transfer size is not explicitly checked in the code, but since the burst size is 64 bytes and the burst length is 8 transfers:
Each transfer size (m_axi_arsize) is 8 bytes (64 bits).
In AXI, transfer size is encoded as log2(bytes per transfer). For 8 bytes, m_axi_arsize = 3'b011.

////////////////////////////////////////////////////////////////////

Fetch is a specific type of read operation that pulls instructions.
Read operations can be broader and also include data fetching.
Write operations are distinct from both fetch and read, but they interact when the CPU changes the state of memory.

////////////////////////////////////////////////////////////////////

Read Address (m_axi_araddr)	                    64-byte aligned
Write Address (m_axi_awaddr)	                64-byte aligned
Transaction Length (m_axi_arlen / m_axi_awlen)	Must be 8
Memory Start (dram_offset)	                    Depends on full_system mode
RAM Size (ramsize)	                            Defined at initialization -> size of allocated memory
Stack Pointer (top->stackptr)	                ramsize - 4*MEGA
AXI Bus Ready (m_axi_rvalid / m_axi_bvalid)	    1 when transaction is valid

///////////////////////////////////////

Physical Memory Start	0x0000 (if full_system is disabled)
DRAM Start Address	DRAM_OFFSET (if full_system is enabled)
Program Entry (ELF Execution Start)	Defined by load_binary(), usually loaded at 0x10000 or 0x80000000 depending on the binary
Stack Start Address	ramsize - 4MB

////////////////////////////////////////

64-Byte WRAP Burst
Assume:

Start address = 0x1000
Burst length = 8 (8 transfers)
Data width = 8 bytes (64-bit system)
Total transfer size = 8 × 8 = 64 bytes
Boundary = 64 bytes (aligned to 0x40)

- **Beat (8 bytes - 64 bit):** Each beat transfers 8 bytes  of data (two 32-bit instructions).  
- **Total Transfer (64 bytes):** The entire burst transfers 64 bytes of data, which in your example corresponds to 16 instructions.  
- **Beat Breakdown for pc = 0x0:**  
- Beat 0 → Addresses 0x0–0x7  (8 bytes = 64 bits)
- Beat 1 → Addresses 0x8–0xF  
- Beat 2 → Addresses 0x10–0x17  
- Beat 3 → Addresses 0x18–0x1F  
- Beat 4 → Addresses 0x20–0x27  
- Beat 5 → Addresses 0x28–0x2F  
- Beat 6 → Addresses 0x30–0x37  
- Beat 7 → Addresses 0x38–0x3F

//////////////////////////////////////////


Variable	        R-type	I-type	S-type	B-type	U-type	J-type
id_reg_rs1_out	    yes	    yes	    yes	    yes	    no	    no
id_reg_rs2_out	    yes	    no	    yes	    yes	    no	    no
id_reg_rd_out	    yes	    yes	    no	    no	    yes	    yes
id_reg_imm_signed	no	    yes	    yes	    yes	    no	    yes
id_reg_imm_unsigned	no	    no	    no	    no	    yes	    no
id_reg_opcode_out	yes	    yes	    yes	    yes	    yes	    yes
id_reg_funct7_out	yes	    no	    no	    no	    no	    no
id_reg_funct3_out	yes	    yes	    yes	    yes	    no	    no

//////////////////////////////////////////
PSEUDOINSTRUCTION
1. LI (Load Immediate)
Pseudo-instruction: li rd, imm

Equivalent instruction:

For 12-bit immediate: ADDI rd, x0, imm

For larger immediate values: A combination of LUI and ADDI (for 20-bit and 32-bit immediate values)

Example:

li x5, 123
Expands to:
ADDI x5, x0, 123

li x5, 0x12345678
Expands to:

nginx
Copy
Edit
LUI x5, 0x12345
ADDI x5, x5, 0x678
2. MOVE
Pseudo-instruction: move rd, rs

Equivalent instruction: ADD rd, rs, x0

Example:

move x5, x6
Expands to:
ADD x5, x6, x0

3. NEG
Pseudo-instruction: neg rd, rs

Equivalent instruction: SUB rd, x0, rs

Example:

neg x5, x6
Expands to:
SUB x5, x0, x6

4. NOT
Pseudo-instruction: not rd, rs

Equivalent instruction: XORI rd, rs, -1

Example:

not x5, x6
Expands to:
XORI x5, x6, -1

5. MV (Move Immediate)
Pseudo-instruction: mv rd, rs

Equivalent instruction: ADD rd, rs, x0

Example:

mv x5, x6
Expands to:
ADD x5, x6, x0

6. LI (Load Immediate)
Pseudo-instruction: li rd, imm

Equivalent instruction:

For 12-bit immediate: ADDI rd, x0, imm

For larger immediate values: A combination of LUI and ADDI (for 20-bit and 32-bit immediate values)

Example:

li x5, 0x7FFFFFFF
Expands to:

nginx
Copy
Edit
LUI x5, 0x7FFFF
ADDI x5, x5, 0xFFFF
7. JALR (Jump and Link Register)
Pseudo-instruction: jalr x0, rs1, imm

Equivalent instruction: JALR x0, rs1, imm

Example:

jalr x0, x1, 4 Expands to:
JALR x0, x1, 4

8. BEQZ (Branch if Equal to Zero)
Pseudo-instruction: beqz rs, label

Equivalent instruction: BEQ rs, x0, label

Example:

beqz x5, label Expands to:
BEQ x5, x0, label

9. BNEZ (Branch if Not Equal to Zero)
Pseudo-instruction: bnez rs, label

Equivalent instruction: BNE rs, x0, label

Example:

bnez x5, label Expands to:
BNE x5, x0, label

10. SEQZ (Set if Equal to Zero)
Pseudo-instruction: seqz rd, rs

Equivalent instruction: SLTIU rd, rs, 1

Example:

seqz x5, x6 Expands to:
SLTIU x5, x6, 1

11. SNEZ (Set if Not Equal to Zero)
Pseudo-instruction: snez rd, rs

Equivalent instruction: SLTIU rd, rs, 1

Example:

snez x5, x6 Expands to:
SLTIU x5, x6, 1

12. SLTIU (Set Less Than Immediate Unsigned)
Pseudo-instruction: sltiu rd, rs, imm

Equivalent instruction: SLTIU rd, rs, imm

Example:

sltiu x5, x6, 10 Expands to:
SLTIU x5, x6, 10

13. BGEZ (Branch if Greater Than or Equal to Zero)
Pseudo-instruction: bgez rs, label

Equivalent instruction: BGE rs, x0, label

Example:

bgez x5, label Expands to:
BGE x5, x0, label

14. BLEZ (Branch if Less Than or Equal to Zero)
Pseudo-instruction: blez rs, label

Equivalent instruction: BLE rs, x0, label

Example:

blez x5, label Expands to:
BLE x5, x0, label

15. BGTZ (Branch if Greater Than Zero)
Pseudo-instruction: bgtz rs, label

Equivalent instruction: BGT rs, x0, label

Example:

bgtz x5, label Expands to:
BGT x5, x0, label

16. BLTZ (Branch if Less Than Zero)
Pseudo-instruction: bltz rs, label

Equivalent instruction: BLT rs, x0, label

Example:

bltz x5, label Expands to:
BLT x5, x0, label

17. LI (Load Immediate)
Pseudo-instruction: li rd, imm

Equivalent instruction:

For 12-bit immediate: ADDI rd, x0, imm

For larger immediate values: A combination of LUI and ADDI (for 20-bit and 32-bit immediate values)

///////////////////////////////
SIGNED VALUE

imm_signed = {
    {19{input_bin[31]}},  // Sign extension for 32-bit signed number (imm[12])
    input_bin[31],        // imm[12]
    input_bin[7],         // imm[11]
    input_bin[30:25],     // imm[10:5]
    input_bin[11:8],      // imm[4:1]
    1'b0                  // imm[0] = 0 (for alignment)
};

{19{input_bin[31]}} Repeat the value input_bin[31] 19 times and concatenate the result.
So, if input_bin[31] = 1, then:

verilog
Copy
Edit
19{input_bin[31]}  → 19'b1111111111111111111
You're doing sign extension of the most significant bit (bit 31) to ensure imm_signed becomes a signed 32-bit value.

/////////////////////

https://lists.riscv.org/g/tech-unprivileged/attachment/535/0/unpriv-isa-asciidoc.pdf page 194 -> instruction format
///// prog1 of wp2 check
PC (Hex)	Instruction (Hex)	Instruction Information	Immediate Value (Hex)	ALU Result (Hex)
0x00000000	fa010113	addi x2, x2, -96	0xFFFFFFA0	0x100 + 0xFFFFFFA0 = 0xFFFFFFA0 (i.e., -96)
0x00000004	04900413	li x8, 73	0x49	0x49
0x00000008	04600493	li x9, 70	0x46	0x46
0x0000000c	04d00513	li x10, 77	0x4D	0x4D
0x00000010	04d00593	li x11, 77	0x4D	0x4D
0x00000014	05000613	li x12, 80	0x50	0x50
0x00000018	02100693	li x13, 33	0x21	0x21
0x0000001c	05800713	li x14, 88	0x58	0x58
0x00000020	05000793	li x15, 80	0x50	0x50
0x00000024	05300813	li x16, 83	0x53	0x53
0x00000028	04d00893	li x17, 77	0x4D	0x4D
0x0000002c	04500913	li x18, 69	0x45	0x45
0x00000030	02200993	li x19, 34	0x22	0x22
0x00000034	0ff47313	andi x6, x8, 255	0xFF	0x49 & 0xFF = 0x49
0x00000038	fff3031b	addiw x6, x6, -1	0xFFFFFFF8	0x49 + 0xFFFFFFF8 = 0x48
0x0000003c	0ff37313	andi x6, x6, 255	0xFF	0x48 & 0xFF = 0x48
0x00000040	00030a13	mv x20, x6	0x0	0x48
0x00000044	0ff4f313	andi x6, x9, 255	0xFF	0x46 & 0xFF = 0x46
0x00000048	fff3031b	addiw x6, x6, -1	0xFFFFFFF8	0x46 + 0xFFFFFFF8 = 0x45
0x0000004c	0ff37313	andi x6, x6, 255	0xFF	0x45 & 0xFF = 0x45
0x00000050	00030a93	mv x21, x6	0x0	0x45
0x00000054	0ff57513	andi x10, x10, 255	0xFF	0x4D & 0xFF = 0x4D
0x00000058	fff5051b	addiw x10, x10, -1	0xFFFFFFF8	0x4D + 0xFFFFFFF8 = 0x4C
0x0000005c	0ff57513	andi x10, x10, 255	0xFF	0x4C & 0xFF = 0x4C
0x00000060	00050b13	mv x22, x10	0x0	0x4C
0x00000064	0ff5f593	andi x11, x11, 255	0xFF	0x4D & 0xFF = 0x4D
0x00000068	fff5859b	addiw x11, x11, -1	0xFFFFFFF8	0x4D + 0xFFFFFFF8 = 0x4C
0x0000006c	0ff5f593	andi x11, x11, 255	0xFF	0x4C & 0xFF = 0x4C
0x00000070	00058b93	mv x23, x11	0x0	0x4C